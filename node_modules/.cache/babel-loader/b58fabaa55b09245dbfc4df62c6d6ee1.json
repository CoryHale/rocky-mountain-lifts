{"ast":null,"code":"import _regeneratorRuntime from\"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{dbUrl}from\"./index\";import axiosWithAuth from\"../contexts/withAuth\";export var GET_CURRENT_USER_START=\"GET_CURRENT_USER_START\";export var GET_CURRENT_USER_SUCCESS=\"GET_CURRENT_USER_SUCCESS\";export var GET_CURRENT_USER_FAILED=\"GET_CURRENT_USER_FAILED\";export var getCurrentUser=function getCurrentUser(uid){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var axiosAuth;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:GET_CURRENT_USER_START});_context.next=3;return axiosWithAuth();case 3:axiosAuth=_context.sent;_context.next=6;return axiosAuth.get(\"\".concat(dbUrl,\"/currentUser\"),uid).then(function(res){dispatch({type:GET_CURRENT_USER_SUCCESS,payload:res.data});}).catch(function(err){dispatch({type:GET_CURRENT_USER_FAILED,payload:err});});case 6:return _context.abrupt(\"return\",_context.sent);case 7:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/src/actions/getCurrentUser.js"],"names":["dbUrl","axiosWithAuth","GET_CURRENT_USER_START","GET_CURRENT_USER_SUCCESS","GET_CURRENT_USER_FAILED","getCurrentUser","uid","dispatch","type","axiosAuth","get","then","res","payload","data","catch","err"],"mappings":"2XAAA,OAASA,KAAT,KAAsB,SAAtB,CACA,MAAOC,CAAAA,aAAP,KAA0B,sBAA1B,CAEA,MAAO,IAAMC,CAAAA,sBAAsB,CAAG,wBAA/B,CACP,MAAO,IAAMC,CAAAA,wBAAwB,CAAG,0BAAjC,CACP,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,yBAAhC,CAEP,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,GAAD,iGAAS,iBAAOC,QAAP,gIACrCA,QAAQ,CAAC,CAAEC,IAAI,CAAEN,sBAAR,CAAD,CAAR,CADqC,sBAGbD,CAAAA,aAAa,EAHA,QAG/BQ,SAH+B,qCAKxBA,CAAAA,SAAS,CACnBC,GADU,WACHV,KADG,iBACkBM,GADlB,EAEVK,IAFU,CAEL,SAACC,GAAD,CAAS,CACbL,QAAQ,CAAC,CACPC,IAAI,CAAEL,wBADC,CAEPU,OAAO,CAAED,GAAG,CAACE,IAFN,CAAD,CAAR,CAID,CAPU,EAQVC,KARU,CAQJ,SAACC,GAAD,CAAS,CACdT,QAAQ,CAAC,CACPC,IAAI,CAAEJ,uBADC,CAEPS,OAAO,CAAEG,GAFF,CAAD,CAAR,CAID,CAbU,CALwB,6GAAT,gEAAvB","sourcesContent":["import { dbUrl } from \"./index\";\nimport axiosWithAuth from \"../contexts/withAuth\";\n\nexport const GET_CURRENT_USER_START = \"GET_CURRENT_USER_START\";\nexport const GET_CURRENT_USER_SUCCESS = \"GET_CURRENT_USER_SUCCESS\";\nexport const GET_CURRENT_USER_FAILED = \"GET_CURRENT_USER_FAILED\";\n\nexport const getCurrentUser = (uid) => async (dispatch) => {\n  dispatch({ type: GET_CURRENT_USER_START });\n\n  const axiosAuth = await axiosWithAuth();\n\n  return await axiosAuth\n    .get(`${dbUrl}/currentUser`, uid)\n    .then((res) => {\n      dispatch({\n        type: GET_CURRENT_USER_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: GET_CURRENT_USER_FAILED,\n        payload: err,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}