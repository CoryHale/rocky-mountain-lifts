{"ast":null,"code":"var _jsxFileName = \"/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/src/components/Employees/TaskCalendar.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\nimport '../../styles/employee-dashboard.scss';\nimport '@fullcalendar/daygrid/main.css';\nimport '@fullcalendar/timegrid/main.css';\nimport '../../styles/calendar.scss';\n\nconst TaskCalendar = () => {\n  const flag = useSelector(state => state.taskToggleReducer.calendarView);\n  const [events, setEvents] = useState([]);\n  const eventsArray = [];\n  const [workOrders, setWorkOrders] = useState([]);\n  const fetchWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n  const [workOrderFlag, setWorkOrderFlag] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  const fetchTasks = useSelector(state => state.getTasksReducer.tasks);\n  const [taskFlag, setTaskFlag] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (fetchWorkOrders) {\n      // fetchWorkOrders.workOrders.map(workOrder => {\n      //     eventsArray.push({\n      //         title: workOrder.serviceDescription,\n      //         date: workOrder.serviceDate\n      //     });\n      // });\n      eventsArray.push({\n        title: 'New Work Order',\n        date: '2020-10-15'\n      });\n      setWorkOrderFlag(true);\n    }\n\n    ;\n  }, [fetchWorkOrders]);\n  useEffect(() => {\n    if (fetchTasks) {\n      // fetchTasks.tasks.map(task => {\n      //     eventsArray.push({\n      //         title: task.taskDescription,\n      //         date: task.taskDate\n      //     });\n      // });\n      eventsArray.push({\n        title: 'New Task',\n        date: '2020-10-13'\n      });\n      setTaskFlag(true);\n    }\n\n    ;\n  }, [fetchTasks]);\n  useEffect(() => {\n    console.log('inside effect');\n\n    if (workOrderFlag && taskFlag) {\n      console.log('inside if');\n      setEvents(eventsArray);\n    }\n\n    ;\n  }, [workOrderFlag, taskFlag]);\n  console.log(events);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, \"Calendar\"), /*#__PURE__*/React.createElement(FullCalendar, {\n    plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, bootstrapPlugin],\n    initialView: \"dayGridMonth\",\n    headerToolbar: {\n      left: 'prev,next today',\n      center: 'title',\n      right: 'dayGridMonth,timeGridWeek,timeGridDay'\n    },\n    events: events,\n    themeSystem: \"bootstrap\",\n    height: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default TaskCalendar;","map":{"version":3,"sources":["/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/src/components/Employees/TaskCalendar.js"],"names":["React","useState","useEffect","useDispatch","useSelector","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","bootstrapPlugin","TaskCalendar","flag","state","taskToggleReducer","calendarView","events","setEvents","eventsArray","workOrders","setWorkOrders","fetchWorkOrders","getWorkOrdersReducer","workOrderFlag","setWorkOrderFlag","tasks","setTasks","fetchTasks","getTasksReducer","taskFlag","setTaskFlag","dispatch","push","title","date","console","log","left","center","right"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\n\nimport '../../styles/employee-dashboard.scss';\nimport '@fullcalendar/daygrid/main.css';\nimport '@fullcalendar/timegrid/main.css';\nimport '../../styles/calendar.scss';\n\nconst TaskCalendar = () => {\n    const flag = useSelector(state => state.taskToggleReducer.calendarView);\n    const [events, setEvents] = useState([]);\n    const eventsArray = [];\n    const [workOrders, setWorkOrders] = useState([]);\n    const fetchWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n    const [workOrderFlag, setWorkOrderFlag] = useState(false);\n    const [tasks, setTasks] = useState([]);\n    const fetchTasks = useSelector(state => state.getTasksReducer.tasks);\n    const [taskFlag, setTaskFlag] = useState(false);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if(fetchWorkOrders) {\n            // fetchWorkOrders.workOrders.map(workOrder => {\n            //     eventsArray.push({\n            //         title: workOrder.serviceDescription,\n            //         date: workOrder.serviceDate\n            //     });\n            // });\n            eventsArray.push({\n                title: 'New Work Order',\n                date: '2020-10-15'\n            });\n            setWorkOrderFlag(true);\n        };\n    }, [fetchWorkOrders]);\n\n    useEffect(() => {\n        if(fetchTasks) {\n            // fetchTasks.tasks.map(task => {\n            //     eventsArray.push({\n            //         title: task.taskDescription,\n            //         date: task.taskDate\n            //     });\n            // });\n            eventsArray.push({\n                title: 'New Task',\n                date: '2020-10-13'\n            })\n            setTaskFlag(true);\n        };\n    }, [fetchTasks]);\n\n    useEffect(() => {\n        console.log('inside effect')\n        if(workOrderFlag && taskFlag) {\n            console.log('inside if')\n            setEvents(eventsArray);\n        };\n    }, [workOrderFlag, taskFlag]);\n\n    console.log(events)\n\n    return (\n        <div className=\"calendar-page\">\n            <h1>Calendar</h1>\n            <FullCalendar\n                plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, bootstrapPlugin]}\n                initialView=\"dayGridMonth\"\n                headerToolbar={{\n                    left: 'prev,next today',\n                    center: 'title',\n                    right: 'dayGridMonth,timeGridWeek,timeGridDay'\n                }}\n                events={events}\n                themeSystem=\"bootstrap\"\n                height=\"auto\"\n            />\n        </div>\n        \n    );\n};\n\nexport default TaskCalendar;"]},"metadata":{},"sourceType":"module"}