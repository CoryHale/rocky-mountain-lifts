{"ast":null,"code":"import _regeneratorRuntime from\"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{dbUrl}from\"./index\";import axiosWithAuth from\"../contexts/withAuth\";export var GET_CUSTOMER_NOTES_START=\"GET_CUSTOMER_NOTES_START\";export var GET_CUSTOMER_NOTES_SUCCESS=\"GET_CUSTOMER_NOTES_SUCCESS\";export var GET_CUSTOMER_NOTES_FAILURE=\"GET_CUSTOMER_NOTES_FAILURE\";export var getCustomerNotes=function getCustomerNotes(customerId){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var axiosAuth;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:GET_CUSTOMER_NOTES_START});_context.next=3;return axiosWithAuth();case 3:axiosAuth=_context.sent;return _context.abrupt(\"return\",axiosAuth.get(\"\".concat(dbUrl,\"/notes/\").concat(customerId)).then(function(res){dispatch({type:GET_CUSTOMER_NOTES_SUCCESS,payload:res.data});}).catch(function(err){dispatch({type:GET_CUSTOMER_NOTES_FAILURE,payload:err});}));case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/src/actions/getCustomerNotes.js"],"names":["dbUrl","axiosWithAuth","GET_CUSTOMER_NOTES_START","GET_CUSTOMER_NOTES_SUCCESS","GET_CUSTOMER_NOTES_FAILURE","getCustomerNotes","customerId","dispatch","type","axiosAuth","get","then","res","payload","data","catch","err"],"mappings":"2XAAA,OAASA,KAAT,KAAsB,SAAtB,CACA,MAAOC,CAAAA,aAAP,KAA0B,sBAA1B,CAEA,MAAO,IAAMC,CAAAA,wBAAwB,CAAG,0BAAjC,CACP,MAAO,IAAMC,CAAAA,0BAA0B,CAAG,4BAAnC,CACP,MAAO,IAAMC,CAAAA,0BAA0B,CAAG,4BAAnC,CAEP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,UAAD,iGAAgB,iBAAOC,QAAP,gIAC9CA,QAAQ,CAAC,CAAEC,IAAI,CAAEN,wBAAR,CAAD,CAAR,CAD8C,sBAGtBD,CAAAA,aAAa,EAHS,QAGxCQ,SAHwC,+CAKvCA,SAAS,CACbC,GADI,WACGV,KADH,mBACkBM,UADlB,GAEJK,IAFI,CAEC,SAACC,GAAD,CAAS,CACbL,QAAQ,CAAC,CACPC,IAAI,CAAEL,0BADC,CAEPU,OAAO,CAAED,GAAG,CAACE,IAFN,CAAD,CAAR,CAID,CAPI,EAQJC,KARI,CAQE,SAACC,GAAD,CAAS,CACdT,QAAQ,CAAC,CACPC,IAAI,CAAEJ,0BADC,CAEPS,OAAO,CAAEG,GAFF,CAAD,CAAR,CAID,CAbI,CALuC,wDAAhB,gEAAzB","sourcesContent":["import { dbUrl } from \"./index\";\nimport axiosWithAuth from \"../contexts/withAuth\";\n\nexport const GET_CUSTOMER_NOTES_START = \"GET_CUSTOMER_NOTES_START\";\nexport const GET_CUSTOMER_NOTES_SUCCESS = \"GET_CUSTOMER_NOTES_SUCCESS\";\nexport const GET_CUSTOMER_NOTES_FAILURE = \"GET_CUSTOMER_NOTES_FAILURE\";\n\nexport const getCustomerNotes = (customerId) => async (dispatch) => {\n  dispatch({ type: GET_CUSTOMER_NOTES_START });\n\n  const axiosAuth = await axiosWithAuth();\n\n  return axiosAuth\n    .get(`${dbUrl}/notes/${customerId}`)\n    .then((res) => {\n      dispatch({\n        type: GET_CUSTOMER_NOTES_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: GET_CUSTOMER_NOTES_FAILURE,\n        payload: err,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}