{"ast":null,"code":"import _regeneratorRuntime from\"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{dbUrl}from\"./index\";import axiosWithAuth from\"../contexts/withAuth\";export var GET_WORK_ORDERS_START=\"GET_WORK_ORDERS_START\";export var GET_WORK_ORDERS_SUCCESS=\"GET_WORK_ORDERS_SUCCESS\";export var GET_WORK_ORDERS_FAILURE=\"GET_WORK_ORDERS_FAILURE\";export var getWorkOrders=function getWorkOrders(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var axiosAuth;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:GET_WORK_ORDERS_START});_context.next=3;return axiosWithAuth();case 3:axiosAuth=_context.sent;return _context.abrupt(\"return\",axiosAuth.get(\"\".concat(dbUrl,\"/work_orders\")).then(function(res){console.log(res.data);dispatch({type:GET_WORK_ORDERS_SUCCESS,payload:res.data});}).catch(function(err){dispatch({type:GET_WORK_ORDERS_FAILURE,payload:err});}));case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/src/actions/getWorkOrders.js"],"names":["dbUrl","axiosWithAuth","GET_WORK_ORDERS_START","GET_WORK_ORDERS_SUCCESS","GET_WORK_ORDERS_FAILURE","getWorkOrders","dispatch","type","axiosAuth","get","then","res","console","log","data","payload","catch","err"],"mappings":"2XAAA,OAASA,KAAT,KAAsB,SAAtB,CACA,MAAOC,CAAAA,aAAP,KAA0B,sBAA1B,CAEA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,uBAA9B,CACP,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,yBAAhC,CACP,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,yBAAhC,CAEP,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,kGAAM,iBAAOC,QAAP,gIACjCA,QAAQ,CAAC,CAAEC,IAAI,CAAEL,qBAAR,CAAD,CAAR,CADiC,sBAGTD,CAAAA,aAAa,EAHJ,QAG3BO,SAH2B,+CAK1BA,SAAS,CACbC,GADI,WACGT,KADH,kBAEJU,IAFI,CAEC,SAACC,GAAD,CAAS,CACbC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB,EACAR,QAAQ,CAAC,CACPC,IAAI,CAAEJ,uBADC,CAEPY,OAAO,CAAEJ,GAAG,CAACG,IAFN,CAAD,CAAR,CAID,CARI,EASJE,KATI,CASE,SAACC,GAAD,CAAS,CACdX,QAAQ,CAAC,CACPC,IAAI,CAAEH,uBADC,CAEPW,OAAO,CAAEE,GAFF,CAAD,CAAR,CAID,CAdI,CAL0B,wDAAN,gEAAtB","sourcesContent":["import { dbUrl } from \"./index\";\nimport axiosWithAuth from \"../contexts/withAuth\";\n\nexport const GET_WORK_ORDERS_START = \"GET_WORK_ORDERS_START\";\nexport const GET_WORK_ORDERS_SUCCESS = \"GET_WORK_ORDERS_SUCCESS\";\nexport const GET_WORK_ORDERS_FAILURE = \"GET_WORK_ORDERS_FAILURE\";\n\nexport const getWorkOrders = () => async (dispatch) => {\n  dispatch({ type: GET_WORK_ORDERS_START });\n\n  const axiosAuth = await axiosWithAuth();\n\n  return axiosAuth\n    .get(`${dbUrl}/work_orders`)\n    .then((res) => {\n      console.log(res.data);\n      dispatch({\n        type: GET_WORK_ORDERS_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: GET_WORK_ORDERS_FAILURE,\n        payload: err,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}