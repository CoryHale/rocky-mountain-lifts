{"ast":null,"code":"var _jsxFileName = \"/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/src/components/Employees/OpenWorkOrders.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, CardHeader, CardBody, CardTitle, CardText, Table, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, FormFeedback, Label, Input, Button } from 'reactstrap';\nimport { getWorkOrder } from '../../actions/getWorkOrder';\nimport '../../styles/employee-dashboard.scss';\n\nconst OpenWorkOrders = () => {\n  const [workOrders, setWorkOrders] = useState([]);\n  const [curWorkOrder, setCurWorkOrder] = useState({});\n  const getWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n  const [customer, setCustomer] = useState({});\n  const [crewMembers, setCrewMembers] = useState([]);\n  const users = useSelector(state => state.getWorkOrderReducer.users);\n  const [isOpen, setIsOpen] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setWorkOrders(getWorkOrders.workOrders);\n  }, [getWorkOrders]);\n\n  const dateConverter = date => {\n    const dateArray = date.split('-');\n    return `${dateArray[1]}/${dateArray[2]}/${dateArray[0]}`;\n  };\n\n  const timeConverter = time => {\n    const timeArray = time.split(':');\n    const hour = parseInt(timeArray[0]);\n    let m;\n\n    if (hour <= 11) {\n      m = 'AM';\n    } else {\n      m = 'PM';\n    }\n\n    ;\n\n    if (hour <= 12) {\n      const newHour = hour.toString();\n      timeArray[0] = newHour;\n    } else {\n      const newHour = (hour - 12).toString();\n      timeArray[0] = newHour;\n    }\n\n    ;\n    return `${timeArray[0]}:${timeArray[1]} ${m}`;\n  };\n\n  const toggle = (e, workOrder) => {\n    if (!isOpen) {\n      setCurWorkOrder(workOrder);\n    } else {\n      setCurWorkOrder({});\n    }\n\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    if (curWorkOrder) {\n      dispatch(getWorkOrder(curWorkOrder));\n    }\n\n    ;\n  }, [curWorkOrder]);\n  useEffect(() => {\n    let employees = [];\n\n    if (users) {\n      users.forEach(user => {\n        if (user.userType === 'customer') {\n          setCustomer(user);\n        } else {\n          employees.push(user);\n        }\n\n        ;\n      });\n      setCrewMembers(employees);\n    }\n  }, [users]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"work-orders-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"open-work-orders-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, \"Open Work Orders\"), workOrders ? workOrders.map(workOrder => /*#__PURE__*/React.createElement(Card, {\n    className: \"work-order-card\",\n    onClick: e => toggle(e, workOrder),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    borderless: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 37\n    }\n  }, \"Job #\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 37\n    }\n  }, \"Customer Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 37\n    }\n  }, \"Service Type\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 37\n    }\n  }, \"Service Date\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 37\n    }\n  }, \"Service Time\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 37\n    }\n  }, workOrder.jobNumber), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 37\n    }\n  }, workOrder.customerName), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 37\n    }\n  }, workOrder.serviceType.length > 1 ? 'Multi' : workOrder.serviceType), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 37\n    }\n  }, dateConverter(workOrder.serviceDate)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 37\n    }\n  }, timeConverter(workOrder.serviceTime)))))))) : null, /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpen,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, `Work Order #: ${curWorkOrder.jobNumber}`), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 29\n    }\n  }, \"Customer Name:\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 29\n    }\n  }, customer.firstName, \" \", customer.lastName)), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 29\n    }\n  }, \"Customer Address\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 29\n    }\n  }, customer.address, \", \", customer.city, \", \", customer.state, \" \", customer.zipcode))))));\n};\n\nexport default OpenWorkOrders;","map":{"version":3,"sources":["/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/src/components/Employees/OpenWorkOrders.js"],"names":["React","useState","useEffect","useSelector","useDispatch","Card","CardHeader","CardBody","CardTitle","CardText","Table","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","FormFeedback","Label","Input","Button","getWorkOrder","OpenWorkOrders","workOrders","setWorkOrders","curWorkOrder","setCurWorkOrder","getWorkOrders","state","getWorkOrdersReducer","customer","setCustomer","crewMembers","setCrewMembers","users","getWorkOrderReducer","isOpen","setIsOpen","dispatch","dateConverter","date","dateArray","split","timeConverter","time","timeArray","hour","parseInt","m","newHour","toString","toggle","e","workOrder","employees","forEach","user","userType","push","map","jobNumber","customerName","serviceType","length","serviceDate","serviceTime","firstName","lastName","address","city","zipcode"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n    CardTitle,\n    CardText,\n    Table,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    FormFeedback,\n    Label,\n    Input,\n    Button\n} from 'reactstrap';\nimport { getWorkOrder } from '../../actions/getWorkOrder';\n\nimport '../../styles/employee-dashboard.scss';\n\nconst OpenWorkOrders = () => {\n    const [workOrders, setWorkOrders] = useState([]);\n    const [curWorkOrder, setCurWorkOrder] = useState({});\n    const getWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n    const [customer, setCustomer] = useState({});\n    const [crewMembers, setCrewMembers] = useState([]);\n    const users = useSelector(state => state.getWorkOrderReducer.users);\n    const [isOpen, setIsOpen] = useState(false);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        setWorkOrders(getWorkOrders.workOrders);\n    }, [getWorkOrders]);\n\n    const dateConverter = date => {\n        const dateArray = date.split('-');\n\n        return `${dateArray[1]}/${dateArray[2]}/${dateArray[0]}`;\n    };\n\n    const timeConverter = time => {\n        const timeArray = time.split(':');\n        const hour = parseInt(timeArray[0]);\n        let m;\n\n        if(hour <= 11) {\n            m = 'AM';\n        } else {\n            m = 'PM';\n        };\n\n        if(hour <= 12) {\n            const newHour = hour.toString();\n            timeArray[0] = newHour;\n        } else {\n            const newHour = (hour - 12).toString();\n            timeArray[0] = newHour;\n        };\n\n        return `${timeArray[0]}:${timeArray[1]} ${m}`;\n    };\n\n    const toggle = (e, workOrder) => {\n        if(!isOpen) {\n            setCurWorkOrder(workOrder);\n        } else {\n            setCurWorkOrder({});\n        }\n        setIsOpen(!isOpen);\n    };\n\n    useEffect(() => {\n        if(curWorkOrder) {\n            dispatch(getWorkOrder(curWorkOrder));\n        };\n    }, [curWorkOrder]);\n\n    useEffect(() => {\n        let employees = [];\n        if(users) {\n            users.forEach(user => {\n                if(user.userType === 'customer') {\n                    setCustomer(user);\n                } else {\n                    employees.push(user);\n                };\n            });\n            setCrewMembers(employees);\n        }\n    }, [users]);\n\n    return (\n        <div className=\"work-orders-page\">\n            <h1 className=\"open-work-orders-title\">Open Work Orders</h1>\n            {workOrders ? \n                workOrders.map(workOrder => (\n                    <Card className=\"work-order-card\" onClick={(e) => toggle(e, workOrder)}>\n                        <CardBody>\n                        <Table borderless>\n                            <thead>\n                                <tr>\n                                    <th>Job #</th>\n                                    <th>Customer Name</th>\n                                    <th>Service Type</th>\n                                    <th>Service Date</th>\n                                    <th>Service Time</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <th>{workOrder.jobNumber}</th>\n                                    <td>{workOrder.customerName}</td>\n                                    <td>{workOrder.serviceType.length > 1 ? 'Multi' : workOrder.serviceType}</td>\n                                    <td>{dateConverter(workOrder.serviceDate)}</td>\n                                    <td>{timeConverter(workOrder.serviceTime)}</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                        </CardBody>\n                    </Card>\n                ))\n            : null}\n            <Modal isOpen={isOpen} toggle={toggle}>\n                <ModalHeader toggle={toggle}>{`Work Order #: ${curWorkOrder.jobNumber}`}</ModalHeader>\n                <ModalBody>\n                    <Form>\n                        <FormGroup>\n                            <Label>Customer Name:</Label>\n                            <span>{customer.firstName} {customer.lastName}</span>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>Customer Address</Label>\n                            <span>{customer.address}, {customer.city}, {customer.state} {customer.zipcode}</span>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n            </Modal>\n        </div>\n    );\n};\n\nexport default OpenWorkOrders;"]},"metadata":{},"sourceType":"module"}