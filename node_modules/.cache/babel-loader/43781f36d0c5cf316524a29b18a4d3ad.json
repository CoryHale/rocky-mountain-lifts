{"ast":null,"code":"var _jsxFileName = \"/Users/coryhale/Documents/rocky-mountain-lifts/src/components/Employees/CustomerPageNotesTab.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { Card, Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { getCustomerNotes } from '../../actions/getCustomerNotes';\n\nconst CustomerPageNotesTab = () => {\n  const [notes, setNotes] = useState([]);\n  const getNotesFromState = useSelector(state => state.getCustomerNotesReducer.notes);\n  const [isOpen, setIsOpen] = useState(false);\n  const [note, setNote] = useState({\n    note: '',\n    createdAt: '',\n    createdBy: ''\n  });\n  const dispatch = useDispatch();\n  const location = useLocation();\n  useEffect(() => {\n    const pathArray = location.pathname.split('/');\n    const customerId = pathArray[pathArray.length - 1];\n    dispatch(getCustomerNotes(customerId));\n  }, []);\n  useEffect(() => {\n    if (getNotesFromState) {\n      setNotes(getNotesFromState);\n    }\n\n    ;\n  }, [getNotesFromState]);\n\n  const toggle = () => {\n    if (isOpen) {\n      setNote({\n        note: '',\n        createdAt: '',\n        createdBy: ''\n      });\n    }\n\n    ;\n    setIsOpen(!isOpen);\n  }; // const employeeFinder = employeeId => {\n  //     employees.forEach(employee => {\n  //         if(employee.value === employeeId) {\n  //             return employee.label;\n  //         };\n  //     });\n  // };\n\n\n  const handleChange = e => {\n    setNote({ ...note,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = e => {\n    // Fix the submit handler\n    e.preventDefault();\n    console.log(\"Note Submitted\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"customer-page-note-tab\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, notes ? notes.notes ? notes.notes.map(note => /*#__PURE__*/React.createElement(Card, {\n    className: \"note-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, note.note), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, \"Created By: \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 40\n    }\n  }, note => {\n    // Make sure note shows name of creator\n    const name = note.createdBy;\n    console.log(name);\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }, \"Created At: \", note.createdAt), \"  \"))) : null : null, /*#__PURE__*/React.createElement(Button, {\n    outline: true,\n    color: \"success\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, \"Add Note\"), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpen,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, \"Add Note\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 33\n    }\n  }, \"Note\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"textarea\",\n    name: \"note\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 33\n    }\n  })))), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"success\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  }, \"Submit\"))));\n};\n\nexport default CustomerPageNotesTab;","map":{"version":3,"sources":["/Users/coryhale/Documents/rocky-mountain-lifts/src/components/Employees/CustomerPageNotesTab.js"],"names":["React","useState","useEffect","useDispatch","useSelector","useLocation","Card","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Label","Input","getCustomerNotes","CustomerPageNotesTab","notes","setNotes","getNotesFromState","state","getCustomerNotesReducer","isOpen","setIsOpen","note","setNote","createdAt","createdBy","dispatch","location","pathArray","pathname","split","customerId","length","toggle","handleChange","e","target","name","value","handleSubmit","preventDefault","console","log","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport {\n    Card,\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n\n} from 'reactstrap';\nimport { getCustomerNotes } from '../../actions/getCustomerNotes';\n\nconst CustomerPageNotesTab = () => {\n    const [notes, setNotes] = useState([]);\n    const getNotesFromState = useSelector(state => state.getCustomerNotesReducer.notes);\n    const [isOpen, setIsOpen] = useState(false);\n    const [note, setNote] = useState({\n        note: '',\n        createdAt: '',\n        createdBy: ''\n    });\n    const dispatch = useDispatch();\n    const location = useLocation();\n\n    useEffect(() => {\n        const pathArray = location.pathname.split('/');\n        const customerId = pathArray[pathArray.length - 1];\n        dispatch(getCustomerNotes(customerId));\n    }, []);\n\n    useEffect(() => {\n        if(getNotesFromState) {\n            setNotes(getNotesFromState);\n        };\n    }, [getNotesFromState]);\n\n    const toggle = () => {\n        if(isOpen) {\n            setNote({\n                note: '',\n                createdAt: '',\n                createdBy: ''\n            });\n        };\n        setIsOpen(!isOpen);\n    };\n\n    // const employeeFinder = employeeId => {\n    //     employees.forEach(employee => {\n    //         if(employee.value === employeeId) {\n    //             return employee.label;\n    //         };\n    //     });\n    // };\n\n    const handleChange = e => {\n        setNote({\n            ...note,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const handleSubmit = e => {  // Fix the submit handler\n        e.preventDefault();\n        console.log(\"Note Submitted\");\n    };\n\n    return (\n        <div className=\"customer-page-note-tab\">\n            {notes ? notes.notes ? notes.notes.map(note => (\n                <Card className=\"note-card\">\n                    <p>{note.note}</p>\n                    <div>\n                        <p>Created By: <span>{(note) => {  // Make sure note shows name of creator\n                            const name = note.createdBy;\n                            console.log(name)\n                        }}</span></p>\n                        <p>Created At: {note.createdAt}</p>  {/* Fix time format */}\n                    </div>\n                </Card>\n            )) : null : null}\n            <Button outline color=\"success\" onClick={toggle}>Add Note</Button>\n            <Modal isOpen={isOpen} toggle={toggle}>\n                    <ModalHeader toggle={toggle}>Add Note</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={handleSubmit}>\n                            <FormGroup>\n                                <Label for=\"note\">Note</Label>\n                                <Input type=\"textarea\" name=\"note\" onChange={handleChange} />\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"success\" onClick={handleSubmit}>Submit</Button>\n                    </ModalFooter>\n                </Modal>\n        </div>\n    );\n};\n\nexport default CustomerPageNotesTab;"]},"metadata":{},"sourceType":"module"}