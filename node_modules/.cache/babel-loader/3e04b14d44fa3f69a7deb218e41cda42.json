{"ast":null,"code":"var _jsxFileName = \"/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/src/components/Employees/OpenWorkOrders.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Card, CardHeader, CardBody, CardTitle, CardText, Table } from 'reactstrap';\nimport WorkOrderCard from './WorkOrderCard';\nimport '../../styles/employee-dashboard.scss';\n\nconst OpenWorkOrders = () => {\n  const [workOrders, setWorkOrders] = useState([]);\n  const getWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n  const [isOpen, setIsOpen] = useState(false);\n  useEffect(() => {\n    setWorkOrders(getWorkOrders.workOrders);\n  }, [getWorkOrders]);\n\n  const dateConverter = date => {\n    const dateArray = date.split('-');\n    return `${dateArray[1]}/${dateArray[2]}/${dateArray[0]}`;\n  };\n\n  const timeConverter = time => {\n    const timeArray = time.split(':');\n    const hour = parseInt(timeArray[0]);\n    let m;\n\n    if (hour <= 11) {\n      m = 'AM';\n    } else {\n      m = 'PM';\n    }\n\n    ;\n\n    if (hour <= 12) {\n      const newHour = hour.toString();\n      timeArray[0] = newHour;\n    } else {\n      const newHour = (hour - 12).toString();\n      timeArray[0] = newHour;\n    }\n\n    ;\n    return `${timeArray[0]}:${timeArray[1]} ${m}`;\n  };\n\n  const toggle = (e, workOrder) => {\n    setIsOpen(!isOpen);\n\n    if (isOpen) {\n      return workOrder;\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"work-orders-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"open-work-orders-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"Open Work Orders\"), workOrders ? workOrders.map(workOrder => /*#__PURE__*/React.createElement(Card, {\n    className: \"work-order-card\",\n    onClick: e => toggle(e, workOrder),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    borderless: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 37\n    }\n  }, \"Job #\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 37\n    }\n  }, \"Customer Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 37\n    }\n  }, \"Service Type\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 37\n    }\n  }, \"Service Date\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 37\n    }\n  }, \"Service Time\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 37\n    }\n  }, workOrder.jobNumber), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 37\n    }\n  }, workOrder.customerName), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 37\n    }\n  }, workOrder.serviceType.length > 1 ? 'Multi' : workOrder.serviceType), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 37\n    }\n  }, dateConverter(workOrder.serviceDate)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 37\n    }\n  }, timeConverter(workOrder.serviceTime)))))))) : null, /*#__PURE__*/React.createElement(WorkOrderCard, {\n    isOpen: isOpen,\n    toggle: toggle,\n    props: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default OpenWorkOrders;","map":{"version":3,"sources":["/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/src/components/Employees/OpenWorkOrders.js"],"names":["React","useState","useEffect","useSelector","Card","CardHeader","CardBody","CardTitle","CardText","Table","WorkOrderCard","OpenWorkOrders","workOrders","setWorkOrders","getWorkOrders","state","getWorkOrdersReducer","isOpen","setIsOpen","dateConverter","date","dateArray","split","timeConverter","time","timeArray","hour","parseInt","m","newHour","toString","toggle","e","workOrder","map","jobNumber","customerName","serviceType","length","serviceDate","serviceTime"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n    CardTitle,\n    CardText,\n    Table\n} from 'reactstrap';\nimport WorkOrderCard from './WorkOrderCard';\n\nimport '../../styles/employee-dashboard.scss';\n\nconst OpenWorkOrders = () => {\n    const [workOrders, setWorkOrders] = useState([]);\n    const getWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n    const [isOpen, setIsOpen] = useState(false);\n\n    useEffect(() => {\n        setWorkOrders(getWorkOrders.workOrders);\n    }, [getWorkOrders]);\n\n    const dateConverter = date => {\n        const dateArray = date.split('-');\n\n        return `${dateArray[1]}/${dateArray[2]}/${dateArray[0]}`;\n    };\n\n    const timeConverter = time => {\n        const timeArray = time.split(':');\n        const hour = parseInt(timeArray[0]);\n        let m;\n\n        if(hour <= 11) {\n            m = 'AM';\n        } else {\n            m = 'PM';\n        };\n\n        if(hour <= 12) {\n            const newHour = hour.toString();\n            timeArray[0] = newHour;\n        } else {\n            const newHour = (hour - 12).toString();\n            timeArray[0] = newHour;\n        };\n\n        return `${timeArray[0]}:${timeArray[1]} ${m}`;\n    };\n\n    const toggle = (e, workOrder) => {\n        setIsOpen(!isOpen);\n        if(isOpen) {\n            return workOrder;\n        };\n    };\n\n    return (\n        <div className=\"work-orders-page\">\n            <h1 className=\"open-work-orders-title\">Open Work Orders</h1>\n            {workOrders ? \n                workOrders.map(workOrder => (\n                    <Card className=\"work-order-card\" onClick={(e) => toggle(e, workOrder)}>\n                        <CardBody>\n                        <Table borderless>\n                            <thead>\n                                <tr>\n                                    <th>Job #</th>\n                                    <th>Customer Name</th>\n                                    <th>Service Type</th>\n                                    <th>Service Date</th>\n                                    <th>Service Time</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <th>{workOrder.jobNumber}</th>\n                                    <td>{workOrder.customerName}</td>\n                                    <td>{workOrder.serviceType.length > 1 ? 'Multi' : workOrder.serviceType}</td>\n                                    <td>{dateConverter(workOrder.serviceDate)}</td>\n                                    <td>{timeConverter(workOrder.serviceTime)}</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                        </CardBody>\n                    </Card>\n                ))\n            : null}\n            <WorkOrderCard isOpen={isOpen} toggle={toggle} props={toggle} />\n        </div>\n    );\n};\n\nexport default OpenWorkOrders;"]},"metadata":{},"sourceType":"module"}