{"ast":null,"code":"import _slicedToArray from\"/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{useSelector,useDispatch}from'react-redux';import{Card,CardHeader,CardBody,Table}from'reactstrap';import{getWorkOrders}from'../../actions/getWorkOrders';import'../../styles/employee-dashboard.scss';var TasksListContent=function TasksListContent(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),tasks=_useState2[0],setTasks=_useState2[1];var getTasks=useSelector(function(state){return state.getTasksReducer.tasks;});var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),workOrders=_useState4[0],setWorkOrders=_useState4[1];var fetchWorkOrders=useSelector(function(state){return state.getWorkOrdersReducer.workOrders;});var dispatch=useDispatch();useEffect(function(){dispatch(getWorkOrders());},[]);useEffect(function(){setTasks(getTasks.tasks);},[getTasks]);var dateConverter=function dateConverter(date){var dateArray=date.split('-');return\"\".concat(dateArray[1],\"/\").concat(dateArray[2],\"/\").concat(dateArray[0]);};var timeConverter=function timeConverter(time){var timeArray=time.split(':');var hour=parseInt(timeArray[0]);var m;if(hour<=11){m='AM';}else{m='PM';};if(hour===0){var newHour='12';timeArray[0]=newHour;}else if(hour<=12){var _newHour=hour.toString();timeArray[0]=_newHour;}else{var _newHour2=(hour-12).toString();timeArray[0]=_newHour2;};return\"\".concat(timeArray[0],\":\").concat(timeArray[1],\" \").concat(m);};return/*#__PURE__*/React.createElement(\"div\",{className:\"tasks-page\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Tasks\"),tasks?tasks.map(function(task){return/*#__PURE__*/React.createElement(Card,{className:\"tasks-page-task-card\"},/*#__PURE__*/React.createElement(Table,{borderless:true},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Task\"),/*#__PURE__*/React.createElement(\"th\",null,\"Date\"),/*#__PURE__*/React.createElement(\"th\",null,\"Time\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,task.taskDescription),/*#__PURE__*/React.createElement(\"td\",null,dateConverter(task.taskDate)),/*#__PURE__*/React.createElement(\"td\",null,timeConverter(task.taskTime))))));}):null);};export default TasksListContent;","map":{"version":3,"sources":["/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/src/components/Employees/TasksListContent.js"],"names":["React","useState","useEffect","useSelector","useDispatch","Card","CardHeader","CardBody","Table","getWorkOrders","TasksListContent","tasks","setTasks","getTasks","state","getTasksReducer","workOrders","setWorkOrders","fetchWorkOrders","getWorkOrdersReducer","dispatch","dateConverter","date","dateArray","split","timeConverter","time","timeArray","hour","parseInt","m","newHour","toString","map","task","taskDescription","taskDate","taskTime"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n    Table\n} from 'reactstrap';\nimport { getWorkOrders } from '../../actions/getWorkOrders';\n\nimport '../../styles/employee-dashboard.scss';\n\nconst TasksListContent = () => {\n    const [tasks, setTasks] = useState([]);\n    const getTasks = useSelector(state => state.getTasksReducer.tasks);\n    const [workOrders, setWorkOrders] = useState([]);\n    const fetchWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getWorkOrders());\n    }, []);\n\n    useEffect(() => {\n        setTasks(getTasks.tasks);\n    }, [getTasks]);\n\n    const dateConverter = date => {\n        const dateArray = date.split('-');\n        return `${dateArray[1]}/${dateArray[2]}/${dateArray[0]}`;\n    };\n\n    const timeConverter = time => {\n        const timeArray = time.split(':');\n        const hour = parseInt(timeArray[0]);\n        let m;\n\n        if(hour <= 11) {\n            m = 'AM';\n        } else {\n            m = 'PM';\n        };\n\n        if(hour === 0) {\n            const newHour = '12';\n            timeArray[0] = newHour;\n        } else if(hour <= 12) {\n            const newHour = hour.toString();\n            timeArray[0] = newHour;\n        } else {\n            const newHour = (hour - 12).toString();\n            timeArray[0] = newHour;\n        };\n\n        return `${timeArray[0]}:${timeArray[1]} ${m}`;\n    };\n\n    return (\n        <div className=\"tasks-page\">\n        <h1>Tasks</h1>\n        {tasks ?\n            tasks.map(task => (\n                <Card className=\"tasks-page-task-card\">\n                    <Table borderless>\n                        <thead>\n                            <tr>\n                                <th>Task</th>\n                                <th>Date</th>\n                                <th>Time</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{task.taskDescription}</td>\n                                <td>{dateConverter(task.taskDate)}</td>\n                                <td>{timeConverter(task.taskTime)}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </Card>\n            )) :\n            null\n        }\n        </div>\n    );\n};\n\nexport default TasksListContent;"]},"metadata":{},"sourceType":"module"}