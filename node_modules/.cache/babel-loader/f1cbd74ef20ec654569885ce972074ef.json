{"ast":null,"code":"import _regeneratorRuntime from\"/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{dbUrl}from'./index';import axiosWithAuth from'../components/Login/withAuth';export var GET_CUSTOMER_NOTES_START='GET_CUSTOMER_NOTES_START';export var GET_CUSTOMER_NOTES_SUCCESS='GET_CUSTOMER_NOTES_SUCCESS';export var GET_CUSTOMER_NOTES_FAILURE='GET_CUSTOMER_NOTES_FAILURE';export var getCustomerNotes=function getCustomerNotes(customerId){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:GET_CUSTOMER_NOTES_START});_context.next=3;return axiosWithAuth().get(\"\".concat(dbUrl,\"/notes/\").concat(customerId)).then(function(res){dispatch({type:GET_CUSTOMER_NOTES_SUCCESS,payload:res.data});}).catch(function(err){dispatch({type:GET_CUSTOMER_NOTES_FAILURE,payload:err});});case 3:return _context.abrupt(\"return\",_context.sent);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/src/actions/getCustomerNotes.js"],"names":["dbUrl","axiosWithAuth","GET_CUSTOMER_NOTES_START","GET_CUSTOMER_NOTES_SUCCESS","GET_CUSTOMER_NOTES_FAILURE","getCustomerNotes","customerId","dispatch","type","get","then","res","payload","data","catch","err"],"mappings":"yYAAA,OAASA,KAAT,KAAsB,SAAtB,CACA,MAAOC,CAAAA,aAAP,KAA0B,8BAA1B,CAEA,MAAO,IAAMC,CAAAA,wBAAwB,CAAG,0BAAjC,CACP,MAAO,IAAMC,CAAAA,0BAA0B,CAAG,4BAAnC,CACP,MAAO,IAAMC,CAAAA,0BAA0B,CAAG,4BAAnC,CAEP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAAC,UAAU,iGAAI,iBAAMC,QAAN,kHAC1CA,QAAQ,CAAC,CAAEC,IAAI,CAAEN,wBAAR,CAAD,CAAR,CAD0C,sBAG7BD,CAAAA,aAAa,GACrBQ,GADQ,WACDT,KADC,mBACcM,UADd,GAERI,IAFQ,CAEH,SAAAC,GAAG,CAAI,CACTJ,QAAQ,CAAC,CACLC,IAAI,CAAEL,0BADD,CAELS,OAAO,CAAED,GAAG,CAACE,IAFR,CAAD,CAAR,CAIH,CAPQ,EAQRC,KARQ,CAQF,SAAAC,GAAG,CAAI,CACVR,QAAQ,CAAC,CACLC,IAAI,CAAEJ,0BADD,CAELQ,OAAO,CAAEG,GAFJ,CAAD,CAAR,CAIH,CAbQ,CAH6B,6GAAJ,gEAAnC","sourcesContent":["import { dbUrl } from './index';\nimport axiosWithAuth from '../components/Login/withAuth';\n\nexport const GET_CUSTOMER_NOTES_START = 'GET_CUSTOMER_NOTES_START';\nexport const GET_CUSTOMER_NOTES_SUCCESS = 'GET_CUSTOMER_NOTES_SUCCESS';\nexport const GET_CUSTOMER_NOTES_FAILURE = 'GET_CUSTOMER_NOTES_FAILURE';\n\nexport const getCustomerNotes = customerId => async dispatch => {\n    dispatch({ type: GET_CUSTOMER_NOTES_START });\n\n    return await axiosWithAuth()\n        .get(`${dbUrl}/notes/${customerId}`)\n        .then(res => {\n            dispatch({\n                type: GET_CUSTOMER_NOTES_SUCCESS,\n                payload: res.data\n            });\n        })\n        .catch(err => {\n            dispatch({\n                type: GET_CUSTOMER_NOTES_FAILURE,\n                payload: err\n            });\n        });\n};"]},"metadata":{},"sourceType":"module"}