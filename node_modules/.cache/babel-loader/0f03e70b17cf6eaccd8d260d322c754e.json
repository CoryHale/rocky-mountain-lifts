{"ast":null,"code":"var _jsxFileName = \"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/src/components/content-components/Calendar.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\nimport \"@fullcalendar/daygrid/main.css\";\nimport \"@fullcalendar/timegrid/main.css\";\nimport \"../../styles/task.scss\";\n\nconst TaskCalendar = () => {\n  const flag = useSelector(state => state.taskToggleReducer.calendarView);\n  const [events, setEvents] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const fetchTasks = useSelector(state => state.getTasksReducer.tasks);\n  const [otherEvents, setOtherEvents] = useState([]);\n  const fetchEvents = useSelector(state => state.getEventsReducer.events);\n  const [workOrders, setWorkOrders] = useState([]);\n  const fetchWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  useEffect(() => {\n    if (fetchTasks) {\n      fetchTasks.tasks.map(task => {\n        setEvents(events => [...events, {\n          title: task.taskDescription,\n          date: task.taskDate\n        }]);\n      });\n    }\n  }, [fetchTasks]);\n  useEffect(() => {\n    let start = \"\";\n    let end = \"\";\n\n    if (fetchEvents) {\n      const array = [];\n      fetchEvents.events.map(event => {\n        // if (event.startTime === \"\") {\n        //   let allDay = true;\n        // }\n        if (event.startDate !== \"\" && event.startTime !== \"\") {\n          start = `${event.startDate}T${event.startTime}`;\n        } else {\n          start = event.startDate;\n        }\n\n        if (event.endDate === \"\") {\n          end = event.startDate;\n        } else if (event.endDate !== \"\" && event.endTime !== \"\") {\n          end = `${event.endDate}T${event.endTime}`;\n        } else {\n          end = event.endDate;\n        }\n\n        if (event.recurring) {\n          array.push({\n            title: event.title,\n            // allDay: allDay,\n            start: start,\n            end: end,\n            startRecur: event.startDate,\n            daysOfWeek: event.daysOfWeek,\n            color: \"red\",\n            extendedProps: {\n              location: event.extendedProps.location,\n              invitees: event.extendedProps.invitees,\n              description: event.extendedProps.description\n            }\n          });\n        } else {\n          array.push({\n            title: event.title,\n            // allDay: allDay,\n            start: start,\n            end: end,\n            color: \"red\",\n            extendedProps: {\n              location: event.extendedProps.location,\n              invitees: event.extendedProps.invitees,\n              description: event.extendedProps.description\n            }\n          });\n        }\n      });\n      setEvents(events => [...events, ...array]);\n    }\n  }, [fetchEvents]);\n  useEffect(() => {\n    if (fetchWorkOrders) {\n      fetchWorkOrders.workOrders.map(workOrder => {\n        setEvents(events => [...events, {\n          title: workOrder.serviceDescription,\n          allDay: workOrder.allDay,\n          start: `${workOrder.serviceDate}T${workOrder.serviceStartTime}`,\n          end: `${workOrder.serviceDate}T${workOrder.serviceEndTime}`,\n          color: \"green\",\n          extendedProps: {\n            workOrderId: workOrder.workOrderId\n          }\n        }]);\n      });\n    }\n  }, [fetchWorkOrders]);\n\n  const handleEventClick = event => {\n    const workOrderId = event.event._def.extendedProps.workOrderId;\n\n    if (workOrderId) {\n      history.push(`/dashboard/workorders/${workOrderId}`);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FullCalendar, {\n    plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, bootstrapPlugin],\n    initialView: \"dayGridMonth\",\n    headerToolbar: {\n      left: \"prev,next today\",\n      center: \"title\",\n      right: \"dayGridMonth,timeGridWeek,timeGridDay\"\n    },\n    events: events,\n    eventClick: handleEventClick,\n    themeSystem: \"bootstrap\",\n    height: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default TaskCalendar;","map":{"version":3,"sources":["/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/src/components/content-components/Calendar.js"],"names":["React","useState","useEffect","useDispatch","useSelector","useHistory","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","bootstrapPlugin","TaskCalendar","flag","state","taskToggleReducer","calendarView","events","setEvents","tasks","setTasks","fetchTasks","getTasksReducer","otherEvents","setOtherEvents","fetchEvents","getEventsReducer","workOrders","setWorkOrders","fetchWorkOrders","getWorkOrdersReducer","dispatch","history","map","task","title","taskDescription","date","taskDate","start","end","array","event","startDate","startTime","endDate","endTime","recurring","push","startRecur","daysOfWeek","color","extendedProps","location","invitees","description","workOrder","serviceDescription","allDay","serviceDate","serviceStartTime","serviceEndTime","workOrderId","handleEventClick","_def","left","center","right"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\n\nimport \"@fullcalendar/daygrid/main.css\";\nimport \"@fullcalendar/timegrid/main.css\";\nimport \"../../styles/task.scss\";\n\nconst TaskCalendar = () => {\n  const flag = useSelector((state) => state.taskToggleReducer.calendarView);\n  const [events, setEvents] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const fetchTasks = useSelector((state) => state.getTasksReducer.tasks);\n  const [otherEvents, setOtherEvents] = useState([]);\n  const fetchEvents = useSelector((state) => state.getEventsReducer.events);\n  const [workOrders, setWorkOrders] = useState([]);\n  const fetchWorkOrders = useSelector(\n    (state) => state.getWorkOrdersReducer.workOrders\n  );\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (fetchTasks) {\n      fetchTasks.tasks.map((task) => {\n        setEvents((events) => [\n          ...events,\n          {\n            title: task.taskDescription,\n            date: task.taskDate,\n          },\n        ]);\n      });\n    }\n  }, [fetchTasks]);\n\n  useEffect(() => {\n    let start = \"\";\n    let end = \"\";\n\n    if (fetchEvents) {\n      const array = [];\n\n      fetchEvents.events.map((event) => {\n        // if (event.startTime === \"\") {\n        //   let allDay = true;\n        // }\n\n        if (event.startDate !== \"\" && event.startTime !== \"\") {\n          start = `${event.startDate}T${event.startTime}`;\n        } else {\n          start = event.startDate;\n        }\n\n        if (event.endDate === \"\") {\n          end = event.startDate;\n        } else if (event.endDate !== \"\" && event.endTime !== \"\") {\n          end = `${event.endDate}T${event.endTime}`;\n        } else {\n          end = event.endDate;\n        }\n\n        if (event.recurring) {\n          array.push({\n            title: event.title,\n            // allDay: allDay,\n            start: start,\n            end: end,\n            startRecur: event.startDate,\n            daysOfWeek: event.daysOfWeek,\n            color: \"red\",\n            extendedProps: {\n              location: event.extendedProps.location,\n              invitees: event.extendedProps.invitees,\n              description: event.extendedProps.description,\n            },\n          });\n        } else {\n          array.push({\n            title: event.title,\n            // allDay: allDay,\n            start: start,\n            end: end,\n            color: \"red\",\n            extendedProps: {\n              location: event.extendedProps.location,\n              invitees: event.extendedProps.invitees,\n              description: event.extendedProps.description,\n            },\n          });\n        }\n      });\n      setEvents((events) => [...events, ...array]);\n    }\n  }, [fetchEvents]);\n\n  useEffect(() => {\n    if (fetchWorkOrders) {\n      fetchWorkOrders.workOrders.map((workOrder) => {\n        setEvents((events) => [\n          ...events,\n          {\n            title: workOrder.serviceDescription,\n            allDay: workOrder.allDay,\n            start: `${workOrder.serviceDate}T${workOrder.serviceStartTime}`,\n            end: `${workOrder.serviceDate}T${workOrder.serviceEndTime}`,\n            color: \"green\",\n            extendedProps: {\n              workOrderId: workOrder.workOrderId,\n            },\n          },\n        ]);\n      });\n    }\n  }, [fetchWorkOrders]);\n\n  const handleEventClick = (event) => {\n    const workOrderId = event.event._def.extendedProps.workOrderId;\n\n    if (workOrderId) {\n      history.push(`/dashboard/workorders/${workOrderId}`);\n    }\n  };\n\n  return (\n    <div className=\"calendar-page\">\n      <FullCalendar\n        plugins={[\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin,\n          bootstrapPlugin,\n        ]}\n        initialView=\"dayGridMonth\"\n        headerToolbar={{\n          left: \"prev,next today\",\n          center: \"title\",\n          right: \"dayGridMonth,timeGridWeek,timeGridDay\",\n        }}\n        events={events}\n        eventClick={handleEventClick}\n        themeSystem=\"bootstrap\"\n        height=\"auto\"\n      />\n    </div>\n  );\n};\n\nexport default TaskCalendar;\n"]},"metadata":{},"sourceType":"module"}