{"ast":null,"code":"var _jsxFileName = \"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/src/components/content-components/Calendar.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\nimport \"@fullcalendar/daygrid/main.css\";\nimport \"@fullcalendar/timegrid/main.css\";\nimport \"../../styles/task.scss\";\n\nconst TaskCalendar = () => {\n  const flag = useSelector(state => state.taskToggleReducer.calendarView);\n  const [events, setEvents] = useState([]);\n  const [workOrders, setWorkOrders] = useState([]);\n  const fetchWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n  const [tasks, setTasks] = useState([]);\n  const fetchTasks = useSelector(state => state.getTasksReducer.tasks);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (fetchWorkOrders) {\n      fetchWorkOrders.workOrders.map(workOrder => {\n        setEvents(events => [...events, {\n          title: workOrder.serviceDescription,\n          allDay: workOrder.allDay,\n          start: `${workOrder.serviceDate}T${workOrder.serviceStartTime}`,\n          end: `${workOrder.serviceDate}T${workOrder.serviceEndTime}`,\n          color: 'green',\n          workOrderId: workOrder.workOrderId\n        }]);\n      });\n    }\n  }, [fetchWorkOrders]);\n  useEffect(() => {\n    if (fetchTasks) {\n      fetchTasks.tasks.map(task => {\n        setEvents(events => [...events, {\n          title: task.taskDescription,\n          date: task.taskDate\n        }]);\n      });\n    }\n  }, [fetchTasks]);\n\n  const handleEventClick = event => {\n    console.log(event.event._def.extendedProps.workOrderId);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"Calendar\"), /*#__PURE__*/React.createElement(FullCalendar, {\n    plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, bootstrapPlugin],\n    initialView: \"dayGridMonth\",\n    headerToolbar: {\n      left: \"prev,next today\",\n      center: \"title\",\n      right: \"dayGridMonth,timeGridWeek,timeGridDay\"\n    },\n    events: events,\n    eventClick: handleEventClick,\n    themeSystem: \"bootstrap\",\n    height: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default TaskCalendar;","map":{"version":3,"sources":["/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/src/components/content-components/Calendar.js"],"names":["React","useState","useEffect","useDispatch","useSelector","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","bootstrapPlugin","TaskCalendar","flag","state","taskToggleReducer","calendarView","events","setEvents","workOrders","setWorkOrders","fetchWorkOrders","getWorkOrdersReducer","tasks","setTasks","fetchTasks","getTasksReducer","dispatch","map","workOrder","title","serviceDescription","allDay","start","serviceDate","serviceStartTime","end","serviceEndTime","color","workOrderId","task","taskDescription","date","taskDate","handleEventClick","event","console","log","_def","extendedProps","left","center","right"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\n\n\nimport \"@fullcalendar/daygrid/main.css\";\nimport \"@fullcalendar/timegrid/main.css\";\nimport \"../../styles/task.scss\";\n\nconst TaskCalendar = () => {\n  const flag = useSelector((state) => state.taskToggleReducer.calendarView);\n  const [events, setEvents] = useState([]);\n  const [workOrders, setWorkOrders] = useState([]);\n  const fetchWorkOrders = useSelector(\n    (state) => state.getWorkOrdersReducer.workOrders\n  );\n  const [tasks, setTasks] = useState([]);\n  const fetchTasks = useSelector((state) => state.getTasksReducer.tasks);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (fetchWorkOrders) {\n      fetchWorkOrders.workOrders.map((workOrder) => {\n        setEvents((events) => [\n          ...events,\n          {\n            title: workOrder.serviceDescription,\n            allDay: workOrder.allDay,\n            start: `${workOrder.serviceDate}T${workOrder.serviceStartTime}`,\n            end: `${workOrder.serviceDate}T${workOrder.serviceEndTime}`,\n            color: 'green',\n            workOrderId: workOrder.workOrderId\n          },\n        ]);\n      });\n    }\n  }, [fetchWorkOrders]);\n\n  useEffect(() => {\n    if (fetchTasks) {\n      fetchTasks.tasks.map((task) => {\n        setEvents((events) => [\n          ...events,\n          {\n            title: task.taskDescription,\n            date: task.taskDate,\n          },\n        ]);\n      });\n    }\n  }, [fetchTasks]);\n\n  const handleEventClick = (event) => {\n    console.log(event.event._def.extendedProps.workOrderId)\n  }\n\n  return (\n    <div className=\"calendar-page\">\n      <h1>Calendar</h1>\n      <FullCalendar\n        plugins={[\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin,\n          bootstrapPlugin,\n        ]}\n        initialView=\"dayGridMonth\"\n        headerToolbar={{\n          left: \"prev,next today\",\n          center: \"title\",\n          right: \"dayGridMonth,timeGridWeek,timeGridDay\",\n        }}\n        events={events}\n        eventClick={handleEventClick}\n        themeSystem=\"bootstrap\"\n        height=\"auto\"\n      />\n    </div>\n  );\n};\n\nexport default TaskCalendar;\n"]},"metadata":{},"sourceType":"module"}