{"ast":null,"code":"var _jsxFileName = \"/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/src/components/Employees/OpenWorkOrders.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Card, CardBody, Table } from 'reactstrap';\nimport '../../styles/employee-dashboard.scss';\n\nconst OpenWorkOrders = () => {\n  const [workOrders, setWorkOrders] = useState([]);\n  const getWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n  const history = useHistory();\n  useEffect(() => {\n    console.log(workOrders);\n    setWorkOrders(getWorkOrders.workOrders);\n  }, [getWorkOrders]);\n\n  const dateConverter = date => {\n    const dateArray = date.split('-');\n    return `${dateArray[1]}/${dateArray[2]}/${dateArray[0]}`;\n  };\n\n  const timeConverter = time => {\n    const timeArray = time.split(':');\n    const hour = parseInt(timeArray[0]);\n    let m;\n\n    if (hour <= 11) {\n      m = 'AM';\n    } else {\n      m = 'PM';\n    }\n\n    ;\n\n    if (hour <= 12) {\n      const newHour = hour.toString();\n      timeArray[0] = newHour;\n    } else {\n      const newHour = (hour - 12).toString();\n      timeArray[0] = newHour;\n    }\n\n    ;\n    return `${timeArray[0]}:${timeArray[1]} ${m}`;\n  };\n\n  const handleClick = (e, workOrder) => {\n    const jobId = workOrder.workOrderId;\n    history.push(`workorders/${jobId}`);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"work-orders-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"open-work-orders-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, \"Open Work Orders\"), workOrders ? workOrders.map(workOrder => /*#__PURE__*/React.createElement(Card, {\n    className: \"work-order-card\",\n    onClick: e => handleClick(e, workOrder),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    borderless: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 37\n    }\n  }, \"Work Order #\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 37\n    }\n  }, \"Job #\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 37\n    }\n  }, \"Customer Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 37\n    }\n  }, \"Service Type\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 37\n    }\n  }, \"Service Date\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 37\n    }\n  }, \"Service Time\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 37\n    }\n  }, workOrder.workOrderId), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 37\n    }\n  }, workOrder.jobNumber ? workOrder.jobNumber : 'N/A'), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 37\n    }\n  }, workOrder.customerName), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 37\n    }\n  }, workOrder.serviceType.length > 1 ? 'Multi' : workOrder.serviceType), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 37\n    }\n  }, dateConverter(workOrder.serviceDate)), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 37\n    }\n  }, timeConverter(workOrder.serviceStartTime)))))))) : null);\n};\n\nexport default OpenWorkOrders;","map":{"version":3,"sources":["/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/src/components/Employees/OpenWorkOrders.js"],"names":["React","useState","useEffect","useSelector","useHistory","Card","CardBody","Table","OpenWorkOrders","workOrders","setWorkOrders","getWorkOrders","state","getWorkOrdersReducer","history","console","log","dateConverter","date","dateArray","split","timeConverter","time","timeArray","hour","parseInt","m","newHour","toString","handleClick","e","workOrder","jobId","workOrderId","push","map","jobNumber","customerName","serviceType","length","serviceDate","serviceStartTime"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n    Card,\n    CardBody,\n    Table,\n} from 'reactstrap';\n\nimport '../../styles/employee-dashboard.scss';\n\nconst OpenWorkOrders = () => {\n    const [workOrders, setWorkOrders] = useState([]);\n    const getWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n    const history = useHistory();\n\n    useEffect(() => {\n        console.log(workOrders)\n        setWorkOrders(getWorkOrders.workOrders);\n    }, [getWorkOrders]);\n\n    const dateConverter = date => {\n        const dateArray = date.split('-');\n        return `${dateArray[1]}/${dateArray[2]}/${dateArray[0]}`;\n    };\n\n    const timeConverter = time => {\n        const timeArray = time.split(':');\n        const hour = parseInt(timeArray[0]);\n        let m;\n\n        if(hour <= 11) {\n            m = 'AM';\n        } else {\n            m = 'PM';\n        };\n\n        if(hour <= 12) {\n            const newHour = hour.toString();\n            timeArray[0] = newHour;\n        } else {\n            const newHour = (hour - 12).toString();\n            timeArray[0] = newHour;\n        };\n\n        return `${timeArray[0]}:${timeArray[1]} ${m}`;\n    };\n\n    const handleClick = (e, workOrder) => {\n        const jobId = workOrder.workOrderId;\n        history.push(`workorders/${jobId}`);\n    };\n\n    return (\n        <div className=\"work-orders-page\">\n            <h1 className=\"open-work-orders-title\">Open Work Orders</h1>\n            {workOrders ? \n                workOrders.map(workOrder => (\n                    <Card className=\"work-order-card\" onClick={(e) => handleClick(e, workOrder)}>\n                        <CardBody>\n                        <Table borderless>\n                            <thead>\n                                <tr>\n                                    <th>Work Order #</th>\n                                    <th>Job #</th>\n                                    <th>Customer Name</th>\n                                    <th>Service Type</th>\n                                    <th>Service Date</th>\n                                    <th>Service Time</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <th>{workOrder.workOrderId}</th>\n                                    <th>{workOrder.jobNumber ? workOrder.jobNumber : 'N/A'}</th>\n                                    <td>{workOrder.customerName}</td>\n                                    <td>{workOrder.serviceType.length > 1 ? 'Multi' : workOrder.serviceType}</td>\n                                    <td>{dateConverter(workOrder.serviceDate)}</td>\n                                    <td>{timeConverter(workOrder.serviceStartTime)}</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                        </CardBody>\n                    </Card>\n                ))\n            : null}\n        </div>\n    );\n};\n\nexport default OpenWorkOrders;"]},"metadata":{},"sourceType":"module"}