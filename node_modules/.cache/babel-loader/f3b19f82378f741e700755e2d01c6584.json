{"ast":null,"code":"import _slicedToArray from\"/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{useSelector,useDispatch}from'react-redux';import{useHistory}from'react-router-dom';import{Card,CardBody,Table}from'reactstrap';import'../../styles/employee-dashboard.scss';var OpenWorkOrders=function OpenWorkOrders(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),workOrders=_useState2[0],setWorkOrders=_useState2[1];var getWorkOrders=useSelector(function(state){return state.getWorkOrdersReducer.workOrders;});var history=useHistory();useEffect(function(){setWorkOrders(getWorkOrders.workOrders);},[getWorkOrders]);var dateConverter=function dateConverter(date){var dateArray=date.split('-');return\"\".concat(dateArray[1],\"/\").concat(dateArray[2],\"/\").concat(dateArray[0]);};var timeConverter=function timeConverter(time){var timeArray=time.split(':');var hour=parseInt(timeArray[0]);var m;if(hour<=11){m='AM';}else{m='PM';};if(hour<=12){var newHour=hour.toString();timeArray[0]=newHour;}else{var _newHour=(hour-12).toString();timeArray[0]=_newHour;};return\"\".concat(timeArray[0],\":\").concat(timeArray[1],\" \").concat(m);};var handleClick=function handleClick(e,workOrder){var jobId=workOrder.jobNumber;history.push(\"workorders/\".concat(jobId));};return/*#__PURE__*/React.createElement(\"div\",{className:\"work-orders-page\"},/*#__PURE__*/React.createElement(\"h1\",{className:\"open-work-orders-title\"},\"Open Work Orders\"),workOrders?workOrders.map(function(workOrder){return/*#__PURE__*/React.createElement(Card,{className:\"work-order-card\",onClick:function onClick(e){return handleClick(e,workOrder);}},/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Table,{borderless:true},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Job #\"),/*#__PURE__*/React.createElement(\"th\",null,\"Customer Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Service Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Service Date\"),/*#__PURE__*/React.createElement(\"th\",null,\"Service Time\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,workOrder.jobNumber),/*#__PURE__*/React.createElement(\"td\",null,workOrder.customerName),/*#__PURE__*/React.createElement(\"td\",null,workOrder.serviceType.length>1?'Multi':workOrder.serviceType),/*#__PURE__*/React.createElement(\"td\",null,dateConverter(workOrder.serviceDate)),/*#__PURE__*/React.createElement(\"td\",null,timeConverter(workOrder.serviceTime)))))));}):null);};export default OpenWorkOrders;","map":{"version":3,"sources":["/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/src/components/Employees/OpenWorkOrders.js"],"names":["React","useState","useEffect","useSelector","useDispatch","useHistory","Card","CardBody","Table","OpenWorkOrders","workOrders","setWorkOrders","getWorkOrders","state","getWorkOrdersReducer","history","dateConverter","date","dateArray","split","timeConverter","time","timeArray","hour","parseInt","m","newHour","toString","handleClick","e","workOrder","jobId","jobNumber","push","map","customerName","serviceType","length","serviceDate","serviceTime"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n    Card,\n    CardBody,\n    Table,\n} from 'reactstrap';\n\nimport '../../styles/employee-dashboard.scss';\n\nconst OpenWorkOrders = () => {\n    const [workOrders, setWorkOrders] = useState([]);\n    const getWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n    const history = useHistory();\n\n    useEffect(() => {\n        setWorkOrders(getWorkOrders.workOrders);\n    }, [getWorkOrders]);\n\n    const dateConverter = date => {\n        const dateArray = date.split('-');\n        return `${dateArray[1]}/${dateArray[2]}/${dateArray[0]}`;\n    };\n\n    const timeConverter = time => {\n        const timeArray = time.split(':');\n        const hour = parseInt(timeArray[0]);\n        let m;\n\n        if(hour <= 11) {\n            m = 'AM';\n        } else {\n            m = 'PM';\n        };\n\n        if(hour <= 12) {\n            const newHour = hour.toString();\n            timeArray[0] = newHour;\n        } else {\n            const newHour = (hour - 12).toString();\n            timeArray[0] = newHour;\n        };\n\n        return `${timeArray[0]}:${timeArray[1]} ${m}`;\n    };\n\n    const handleClick = (e, workOrder) => {\n        const jobId = workOrder.jobNumber;\n        history.push(`workorders/${jobId}`);\n    };\n\n    return (\n        <div className=\"work-orders-page\">\n            <h1 className=\"open-work-orders-title\">Open Work Orders</h1>\n            {workOrders ? \n                workOrders.map(workOrder => (\n                    <Card className=\"work-order-card\" onClick={(e) => handleClick(e, workOrder)}>\n                        <CardBody>\n                        <Table borderless>\n                            <thead>\n                                <tr>\n                                    <th>Job #</th>\n                                    <th>Customer Name</th>\n                                    <th>Service Type</th>\n                                    <th>Service Date</th>\n                                    <th>Service Time</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <th>{workOrder.jobNumber}</th>\n                                    <td>{workOrder.customerName}</td>\n                                    <td>{workOrder.serviceType.length > 1 ? 'Multi' : workOrder.serviceType}</td>\n                                    <td>{dateConverter(workOrder.serviceDate)}</td>\n                                    <td>{timeConverter(workOrder.serviceTime)}</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                        </CardBody>\n                    </Card>\n                ))\n            : null}\n        </div>\n    );\n};\n\nexport default OpenWorkOrders;"]},"metadata":{},"sourceType":"module"}