{"ast":null,"code":"import _regeneratorRuntime from\"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axiosWithAuth from\"../contexts/withAuth\";import{dbUrl}from\"./index\";export var ADD_EVENT_START=\"ADD_EVENT_START\";export var ADD_EVENT_SUCCESS=\"ADD_EVENT_SUCCESS\";export var ADD_EVENT_FAILURE=\"ADD_EVENT_FAILURE\";export var addEvent=function addEvent(event){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var axiosAuth;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:ADD_EVENT_START});_context.next=3;return axiosWithAuth();case 3:axiosAuth=_context.sent;return _context.abrupt(\"return\",axiosAuth.post(\"\".concat(dbUrl,\"/events\"),event).then(function(){dispatch({type:ADD_EVENT_SUCCESS,payload:\"SUCCESS\"});}).catch(function(err){dispatch({type:ADD_EVENT_FAILURE,payload:err.response.data});}));case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/src/actions/addEvent.js"],"names":["axiosWithAuth","dbUrl","ADD_EVENT_START","ADD_EVENT_SUCCESS","ADD_EVENT_FAILURE","addEvent","event","dispatch","type","axiosAuth","post","then","payload","catch","err","response","data"],"mappings":"2XAAA,MAAOA,CAAAA,aAAP,KAA0B,sBAA1B,CACA,OAASC,KAAT,KAAsB,SAAtB,CAEA,MAAO,IAAMC,CAAAA,eAAe,CAAG,iBAAxB,CACP,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,mBAA1B,CACP,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,mBAA1B,CAEP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,iGAAW,iBAAOC,QAAP,gIACjCA,QAAQ,CAAC,CAAEC,IAAI,CAAEN,eAAR,CAAD,CAAR,CADiC,sBAGTF,CAAAA,aAAa,EAHJ,QAG3BS,SAH2B,+CAK1BA,SAAS,CACbC,IADI,WACIT,KADJ,YACoBK,KADpB,EAEJK,IAFI,CAEC,UAAM,CACVJ,QAAQ,CAAC,CACPC,IAAI,CAAEL,iBADC,CAEPS,OAAO,CAAE,SAFF,CAAD,CAAR,CAID,CAPI,EAQJC,KARI,CAQE,SAACC,GAAD,CAAS,CACdP,QAAQ,CAAC,CACPC,IAAI,CAAEJ,iBADC,CAEPQ,OAAO,CAAEE,GAAG,CAACC,QAAJ,CAAaC,IAFf,CAAD,CAAR,CAID,CAbI,CAL0B,wDAAX,gEAAjB","sourcesContent":["import axiosWithAuth from \"../contexts/withAuth\";\nimport { dbUrl } from \"./index\";\n\nexport const ADD_EVENT_START = \"ADD_EVENT_START\";\nexport const ADD_EVENT_SUCCESS = \"ADD_EVENT_SUCCESS\";\nexport const ADD_EVENT_FAILURE = \"ADD_EVENT_FAILURE\";\n\nexport const addEvent = (event) => async (dispatch) => {\n  dispatch({ type: ADD_EVENT_START });\n\n  const axiosAuth = await axiosWithAuth();\n\n  return axiosAuth\n    .post(`${dbUrl}/events`, event)\n    .then(() => {\n      dispatch({\n        type: ADD_EVENT_SUCCESS,\n        payload: \"SUCCESS\",\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: ADD_EVENT_FAILURE,\n        payload: err.response.data,\n      });\n    });\n};"]},"metadata":{},"sourceType":"module"}