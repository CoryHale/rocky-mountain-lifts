{"ast":null,"code":"import _regeneratorRuntime from\"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axiosWithAuth from\"../contexts/withAuth\";import{dbUrl}from\"./index\";export var EDIT_TASK_START=\"EDIT_TASK_START\";export var EDIT_TASK_SUCCESS=\"EDIT_TASK_SUCCESS\";export var EDIT_TASK_FAILURE=\"EDIT_TASK_FAILURE\";export var editTask=function editTask(data){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var axiosAuth;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:EDIT_TASK_START});console.log(data);_context.next=4;return axiosWithAuth();case 4:axiosAuth=_context.sent;return _context.abrupt(\"return\",axiosAuth.put(\"\".concat(dbUrl,\"/task\"),data).then(function(){dispatch({type:EDIT_TASK_SUCCESS,payload:\"SUCCESS\"});}).catch(function(err){dispatch({type:EDIT_TASK_FAILURE,payload:err.response.data});}));case 6:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/src/actions/editTask.js"],"names":["axiosWithAuth","dbUrl","EDIT_TASK_START","EDIT_TASK_SUCCESS","EDIT_TASK_FAILURE","editTask","data","dispatch","type","console","log","axiosAuth","put","then","payload","catch","err","response"],"mappings":"2XAAA,MAAOA,CAAAA,aAAP,KAA0B,sBAA1B,CACA,OAASC,KAAT,KAAsB,SAAtB,CAEA,MAAO,IAAMC,CAAAA,eAAe,CAAG,iBAAxB,CACP,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,mBAA1B,CACP,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,mBAA1B,CAEP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,IAAD,iGAAU,iBAAOC,QAAP,gIAChCA,QAAQ,CAAC,CAAEC,IAAI,CAAEN,eAAR,CAAD,CAAR,CAEAO,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAHgC,sBAKRN,CAAAA,aAAa,EALL,QAK1BW,SAL0B,+CAOzBA,SAAS,CACbC,GADI,WACGX,KADH,UACiBK,IADjB,EAEJO,IAFI,CAEC,UAAM,CACVN,QAAQ,CAAC,CACPC,IAAI,CAAEL,iBADC,CAEPW,OAAO,CAAE,SAFF,CAAD,CAAR,CAID,CAPI,EAQJC,KARI,CAQE,SAACC,GAAD,CAAS,CACdT,QAAQ,CAAC,CACPC,IAAI,CAAEJ,iBADC,CAEPU,OAAO,CAAEE,GAAG,CAACC,QAAJ,CAAaX,IAFf,CAAD,CAAR,CAID,CAbI,CAPyB,wDAAV,gEAAjB","sourcesContent":["import axiosWithAuth from \"../contexts/withAuth\";\nimport { dbUrl } from \"./index\";\n\nexport const EDIT_TASK_START = \"EDIT_TASK_START\";\nexport const EDIT_TASK_SUCCESS = \"EDIT_TASK_SUCCESS\";\nexport const EDIT_TASK_FAILURE = \"EDIT_TASK_FAILURE\";\n\nexport const editTask = (data) => async (dispatch) => {\n  dispatch({ type: EDIT_TASK_START });\n\n  console.log(data)\n\n  const axiosAuth = await axiosWithAuth();\n\n  return axiosAuth\n    .put(`${dbUrl}/task`, data)\n    .then(() => {\n      dispatch({\n        type: EDIT_TASK_SUCCESS,\n        payload: \"SUCCESS\",\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: EDIT_TASK_FAILURE,\n        payload: err.response.data,\n      });\n    });\n};"]},"metadata":{},"sourceType":"module"}