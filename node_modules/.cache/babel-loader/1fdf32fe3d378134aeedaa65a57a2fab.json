{"ast":null,"code":"import { dbUrl } from \"./index\";\nimport axiosWithAuth from \"../contexts/withAuth\";\nexport const GET_TASKS_START = \"GET_TASKS_START\";\nexport const GET_TASKS_SUCCESS = \"GET_TASKS_SUCCESS\";\nexport const GET_TASKS_FAILURE = \"GET_TASKS_FAILURE\";\nexport const getTasks = () => async dispatch => {\n  dispatch({\n    type: GET_TASKS_START\n  });\n  const axiosAuth = await axiosWithAuth();\n  return axiosAuth.get(`${dbUrl}/tasks`).then(res => {\n    dispatch({\n      type: GET_TASKS_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: GET_TASKS_FAILURE,\n      payload: err\n    });\n  });\n};","map":{"version":3,"sources":["/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/src/actions/getTasks.js"],"names":["dbUrl","axiosWithAuth","GET_TASKS_START","GET_TASKS_SUCCESS","GET_TASKS_FAILURE","getTasks","dispatch","type","axiosAuth","get","then","res","payload","data","catch","err"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AAEA,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AAEA,QAAMM,SAAS,GAAG,MAAMP,aAAa,EAArC;AAEA,SAAOO,SAAS,CACbC,GADI,CACC,GAAET,KAAM,QADT,EAEJU,IAFI,CAEEC,GAAD,IAAS;AACbL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,iBADC;AAEPS,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,KAAD,CAAR;AAID,GAPI,EAQJC,KARI,CAQGC,GAAD,IAAS;AACdT,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEH,iBADC;AAEPQ,MAAAA,OAAO,EAAEG;AAFF,KAAD,CAAR;AAID,GAbI,CAAP;AAcD,CAnBM","sourcesContent":["import { dbUrl } from \"./index\";\nimport axiosWithAuth from \"../contexts/withAuth\";\n\nexport const GET_TASKS_START = \"GET_TASKS_START\";\nexport const GET_TASKS_SUCCESS = \"GET_TASKS_SUCCESS\";\nexport const GET_TASKS_FAILURE = \"GET_TASKS_FAILURE\";\n\nexport const getTasks = () => async (dispatch) => {\n  dispatch({ type: GET_TASKS_START });\n\n  const axiosAuth = await axiosWithAuth();\n\n  return axiosAuth\n    .get(`${dbUrl}/tasks`)\n    .then((res) => {\n      dispatch({\n        type: GET_TASKS_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: GET_TASKS_FAILURE,\n        payload: err,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}