{"ast":null,"code":"import axiosWithAuth from \"../contexts/withAuth\";\nimport { dbUrl } from \"./index\";\nexport const ADD_TASK_START = \"ADD_TASK_START\";\nexport const ADD_TASK_SUCCESS = \"ADD_TASK_SUCCESS\";\nexport const ADD_TASK_FAILURE = \"ADD_TASK_FAILURE\";\nexport const addTask = task => async dispatch => {\n  dispatch({\n    type: ADD_TASK_START\n  });\n  return await axiosWithAuth().post(`${dbUrl}/tasks`, task).then(() => {\n    dispatch({\n      type: ADD_TASK_SUCCESS,\n      payload: \"SUCCESS\"\n    });\n  }).catch(err => {\n    dispatch({\n      type: ADD_TASK_FAILURE,\n      payload: err.response.data\n    });\n  });\n};","map":{"version":3,"sources":["/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/src/actions/addTask.js"],"names":["axiosWithAuth","dbUrl","ADD_TASK_START","ADD_TASK_SUCCESS","ADD_TASK_FAILURE","addTask","task","dispatch","type","post","then","payload","catch","err","response","data"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,sBAA1B;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,OAAO,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACnDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEN;AAAR,GAAD,CAAR;AAEA,SAAO,MAAMF,aAAa,GACvBS,IADU,CACJ,GAAER,KAAM,QADJ,EACaK,IADb,EAEVI,IAFU,CAEL,MAAM;AACVH,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,gBADC;AAEPQ,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GAPU,EAQVC,KARU,CAQHC,GAAD,IAAS;AACdN,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,gBADC;AAEPO,MAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID,GAbU,CAAb;AAcD,CAjBM","sourcesContent":["import axiosWithAuth from \"../contexts/withAuth\";\nimport { dbUrl } from \"./index\";\n\nexport const ADD_TASK_START = \"ADD_TASK_START\";\nexport const ADD_TASK_SUCCESS = \"ADD_TASK_SUCCESS\";\nexport const ADD_TASK_FAILURE = \"ADD_TASK_FAILURE\";\n\nexport const addTask = (task) => async (dispatch) => {\n  dispatch({ type: ADD_TASK_START });\n\n  return await axiosWithAuth()\n    .post(`${dbUrl}/tasks`, task)\n    .then(() => {\n      dispatch({\n        type: ADD_TASK_SUCCESS,\n        payload: \"SUCCESS\",\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: ADD_TASK_FAILURE,\n        payload: err.response.data,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}