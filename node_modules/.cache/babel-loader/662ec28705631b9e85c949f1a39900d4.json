{"ast":null,"code":"import _regeneratorRuntime from\"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axiosWithAuth from\"../contexts/withAuth\";import{dbUrl}from\"./index\";export var ADD_NOTE_START=\"ADD_NOTE_START\";export var ADD_NOTE_SUCCESS=\"ADD_NOTE_SUCCESS\";export var ADD_NOTE_FAILURE=\"ADD_NOTE_FAILURE\";export var addNote=function addNote(note){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var axiosAuth;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch({type:ADD_NOTE_START});_context.next=3;return axiosWithAuth();case 3:axiosAuth=_context.sent;return _context.abrupt(\"return\",axiosAuth.post(\"\".concat(dbUrl,\"/notes\"),note).then(function(){dispatch({type:ADD_NOTE_SUCCESS,payload:\"SUCCESS\"});}).catch(function(err){dispatch({type:ADD_NOTE_FAILURE,payload:err.response.data});}));case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/coryhale/Documents/Rocky Mountain Lifts/rocky-mountain-lifts copy/src/actions/addNote.js"],"names":["axiosWithAuth","dbUrl","ADD_NOTE_START","ADD_NOTE_SUCCESS","ADD_NOTE_FAILURE","addNote","note","dispatch","type","axiosAuth","post","then","payload","catch","err","response","data"],"mappings":"2XAAA,MAAOA,CAAAA,aAAP,KAA0B,sBAA1B,CACA,OAASC,KAAT,KAAsB,SAAtB,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,gBAAvB,CACP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,kBAAzB,CACP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,kBAAzB,CAEP,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,IAAD,iGAAU,iBAAOC,QAAP,gIAC/BA,QAAQ,CAAC,CAAEC,IAAI,CAAEN,cAAR,CAAD,CAAR,CAD+B,sBAGPF,CAAAA,aAAa,EAHN,QAGzBS,SAHyB,+CAKxBA,SAAS,CACbC,IADI,WACIT,KADJ,WACmBK,IADnB,EAEJK,IAFI,CAEC,UAAM,CACVJ,QAAQ,CAAC,CACPC,IAAI,CAAEL,gBADC,CAEPS,OAAO,CAAE,SAFF,CAAD,CAAR,CAID,CAPI,EAQJC,KARI,CAQE,SAACC,GAAD,CAAS,CACdP,QAAQ,CAAC,CACPC,IAAI,CAAEJ,gBADC,CAEPQ,OAAO,CAAEE,GAAG,CAACC,QAAJ,CAAaC,IAFf,CAAD,CAAR,CAID,CAbI,CALwB,wDAAV,gEAAhB","sourcesContent":["import axiosWithAuth from \"../contexts/withAuth\";\nimport { dbUrl } from \"./index\";\n\nexport const ADD_NOTE_START = \"ADD_NOTE_START\";\nexport const ADD_NOTE_SUCCESS = \"ADD_NOTE_SUCCESS\";\nexport const ADD_NOTE_FAILURE = \"ADD_NOTE_FAILURE\";\n\nexport const addNote = (note) => async (dispatch) => {\n  dispatch({ type: ADD_NOTE_START });\n\n  const axiosAuth = await axiosWithAuth();\n\n  return axiosAuth\n    .post(`${dbUrl}/notes`, note)\n    .then(() => {\n      dispatch({\n        type: ADD_NOTE_SUCCESS,\n        payload: \"SUCCESS\",\n      });\n    })\n    .catch((err) => {\n      dispatch({\n        type: ADD_NOTE_FAILURE,\n        payload: err.response.data,\n      });\n    });\n};"]},"metadata":{},"sourceType":"module"}