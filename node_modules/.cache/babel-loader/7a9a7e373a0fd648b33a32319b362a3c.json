{"ast":null,"code":"var _jsxFileName = \"/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/src/components/Employees/TaskCalendar.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\nimport '../../styles/employee-dashboard.scss';\nimport '@fullcalendar/daygrid/main.css';\nimport '@fullcalendar/timegrid/main.css';\nimport '../../styles/calendar.scss';\n\nconst TaskCalendar = () => {\n  const flag = useSelector(state => state.taskToggleReducer.calendarView);\n  const [events, setEvents] = useState([]);\n  const eventsArray = [{\n    title: 'eh',\n    date: '2020-10-13'\n  }, {\n    title: 'meh',\n    date: '2020-10-14'\n  }, {\n    title: 'AGGGGGHHHHH',\n    date: '2020-10-15'\n  }];\n  const [workOrders, setWorkOrders] = useState([]);\n  const fetchWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n  const [tasks, setTasks] = useState([]);\n  const fetchTasks = useSelector(state => state.getTasksReducer.tasks);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (fetchWorkOrders) {\n      // fetchWorkOrders.workOrders.map(workOrder => {\n      //     eventsArray.push({\n      //         title: workOrder.serviceDescription,\n      //         date: workOrder.serviceDate\n      //     });\n      // });\n      setEvents(events => {\n        [...events, {\n          title: 'New Work Order',\n          date: '2020-10-15'\n        }];\n      });\n    }\n\n    ;\n  }, [fetchWorkOrders]);\n  useEffect(() => {\n    if (fetchTasks) {\n      // fetchTasks.tasks.map(task => {\n      //     eventsArray.push({\n      //         title: task.taskDescription,\n      //         date: task.taskDate\n      //     });\n      // });\n      setEvents.push({\n        title: 'New Task',\n        date: '2020-10-13'\n      });\n    }\n\n    ;\n  }, [fetchTasks]);\n\n  const handleEvents = eventsArray => {\n    setEvents(eventsArray);\n  };\n\n  console.log(eventsArray);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"Calendar\"), /*#__PURE__*/React.createElement(FullCalendar, {\n    plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, bootstrapPlugin],\n    initialView: \"dayGridMonth\",\n    headerToolbar: {\n      left: 'prev,next today',\n      center: 'title',\n      right: 'dayGridMonth,timeGridWeek,timeGridDay'\n    },\n    events: events,\n    themeSystem: \"bootstrap\",\n    height: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default TaskCalendar;","map":{"version":3,"sources":["/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/src/components/Employees/TaskCalendar.js"],"names":["React","useState","useEffect","useDispatch","useSelector","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","bootstrapPlugin","TaskCalendar","flag","state","taskToggleReducer","calendarView","events","setEvents","eventsArray","title","date","workOrders","setWorkOrders","fetchWorkOrders","getWorkOrdersReducer","tasks","setTasks","fetchTasks","getTasksReducer","dispatch","push","handleEvents","console","log","left","center","right"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\n\nimport '../../styles/employee-dashboard.scss';\nimport '@fullcalendar/daygrid/main.css';\nimport '@fullcalendar/timegrid/main.css';\nimport '../../styles/calendar.scss';\n\nconst TaskCalendar = () => {\n    const flag = useSelector(state => state.taskToggleReducer.calendarView);\n    const [events, setEvents] = useState([]);\n    const eventsArray = [\n        {\n            title: 'eh',\n            date: '2020-10-13'\n        },\n        {\n            title: 'meh',\n            date: '2020-10-14'\n        },\n        {\n            title: 'AGGGGGHHHHH',\n            date: '2020-10-15'\n        }\n    ];\n    const [workOrders, setWorkOrders] = useState([]);\n    const fetchWorkOrders = useSelector(state => state.getWorkOrdersReducer.workOrders);\n    const [tasks, setTasks] = useState([]);\n    const fetchTasks = useSelector(state => state.getTasksReducer.tasks);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if(fetchWorkOrders) {\n            // fetchWorkOrders.workOrders.map(workOrder => {\n            //     eventsArray.push({\n            //         title: workOrder.serviceDescription,\n            //         date: workOrder.serviceDate\n            //     });\n            // });\n            setEvents(events => {\n                [\n                    ...events,\n                    {\n                        title: 'New Work Order',\n                        date: '2020-10-15'\n                    }\n                ]\n            });\n        };\n    }, [fetchWorkOrders]);\n\n    useEffect(() => {\n        if(fetchTasks) {\n            // fetchTasks.tasks.map(task => {\n            //     eventsArray.push({\n            //         title: task.taskDescription,\n            //         date: task.taskDate\n            //     });\n            // });\n            setEvents.push({\n                title: 'New Task',\n                date: '2020-10-13'\n            })\n        };\n    }, [fetchTasks]);\n\n    const handleEvents = eventsArray => {\n        setEvents(eventsArray);\n    };\n\n    console.log(eventsArray)\n\n    return (\n        <div className=\"calendar-page\">\n            <h1>Calendar</h1>\n            <FullCalendar\n                plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, bootstrapPlugin]}\n                initialView=\"dayGridMonth\"\n                headerToolbar={{\n                    left: 'prev,next today',\n                    center: 'title',\n                    right: 'dayGridMonth,timeGridWeek,timeGridDay'\n                }}\n                events={events}\n                themeSystem=\"bootstrap\"\n                height=\"auto\"\n            />\n        </div>\n        \n    );\n};\n\nexport default TaskCalendar;"]},"metadata":{},"sourceType":"module"}