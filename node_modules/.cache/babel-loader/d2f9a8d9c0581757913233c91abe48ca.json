{"ast":null,"code":"/*!\n * Globalize v1.5.0\n *\n * http://github.com/jquery/globalize\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2020-03-25T12:19Z\n */\n(function (root, factory) {\n  // UMD returnExports\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"cldr\", \"../globalize\", \"./number\", \"cldr/event\", \"cldr/supplemental\"], factory);\n  } else if (typeof exports === \"object\") {\n    // Node, CommonJS\n    module.exports = factory(require(\"cldrjs\"), require(\"../globalize\"));\n  } else {\n    // Global\n    factory(root.Cldr, root.Globalize);\n  }\n})(this, function (Cldr, Globalize) {\n  var alwaysArray = Globalize._alwaysArray,\n      createError = Globalize._createError,\n      formatMessageToParts = Globalize._formatMessageToParts,\n      numberNumberingSystem = Globalize._numberNumberingSystem,\n      numberPattern = Globalize._numberPattern,\n      partsJoin = Globalize._partsJoin,\n      partsPush = Globalize._partsPush,\n      runtimeBind = Globalize._runtimeBind,\n      stringPad = Globalize._stringPad,\n      validateCldr = Globalize._validateCldr,\n      validateDefaultLocale = Globalize._validateDefaultLocale,\n      validateParameterPresence = Globalize._validateParameterPresence,\n      validateParameterType = Globalize._validateParameterType,\n      validateParameterTypeNumber = Globalize._validateParameterTypeNumber,\n      validateParameterTypePlainObject = Globalize._validateParameterTypePlainObject;\n\n  var createErrorPluralModulePresence = function () {\n    return createError(\"E_MISSING_PLURAL_MODULE\", \"Plural module not loaded.\");\n  };\n\n  var validateParameterTypeCurrency = function (value, name) {\n    validateParameterType(value, name, value === undefined || typeof value === \"string\" && /^[A-Za-z]{3}$/.test(value), \"3-letter currency code string as defined by ISO 4217\");\n  };\n\n  var currencyFormatterFn = function (currencyToPartsFormatter) {\n    return function currencyFormatter(value) {\n      return partsJoin(currencyToPartsFormatter(value));\n    };\n  };\n  /**\n   * supplementalOverride( currency, pattern, cldr )\n   *\n   * Return pattern with fraction digits overriden by supplemental currency data.\n   */\n\n\n  var currencySupplementalOverride = function (currency, pattern, cldr) {\n    var digits,\n        fraction = \"\",\n        fractionData = cldr.supplemental([\"currencyData/fractions\", currency]) || cldr.supplemental(\"currencyData/fractions/DEFAULT\");\n    digits = +fractionData._digits;\n\n    if (digits) {\n      fraction = \".\" + stringPad(\"0\", digits).slice(0, -1) + fractionData._rounding;\n    }\n\n    return pattern.replace(/\\.(#+|0*[0-9]|0+[0-9]?)/g, fraction);\n  };\n\n  var objectFilter = function (object, testRe) {\n    var key,\n        copy = {};\n\n    for (key in object) {\n      if (testRe.test(key)) {\n        copy[key] = object[key];\n      }\n    }\n\n    return copy;\n  };\n\n  var currencyUnitPatterns = function (cldr) {\n    return objectFilter(cldr.main([\"numbers\", \"currencyFormats-numberSystem-\" + numberNumberingSystem(cldr)]), /^unitPattern/);\n  };\n  /**\n   * nameProperties( currency, cldr )\n   *\n   * Return number pattern with the appropriate currency code in as literal.\n   */\n\n\n  var currencyNameProperties = function (currency, cldr) {\n    var pattern = numberPattern(\"decimal\", cldr); // The number of decimal places and the rounding for each currency is not locale-specific. Those\n    // values overridden by Supplemental Currency Data.\n\n    pattern = currencySupplementalOverride(currency, pattern, cldr);\n    return {\n      displayNames: objectFilter(cldr.main([\"numbers/currencies\", currency]), /^displayName/),\n      pattern: pattern,\n      unitPatterns: currencyUnitPatterns(cldr)\n    };\n  };\n  /**\n   * Unicode regular expression for: everything except math symbols, currency signs, dingbats, and\n   * box-drawing characters.\n   *\n   * Generated by:\n   *\n   * regenerate()\n   *   .addRange( 0x0, 0x10FFFF )\n   *   .remove( require( \"unicode-7.0.0/categories/S/symbols\" ) ).toString();\n   *\n   * https://github.com/mathiasbynens/regenerate\n   * https://github.com/mathiasbynens/unicode-7.0.0\n   */\n\n\n  var regexpNotS = /[\\0-#%-\\*,-;\\?-\\]_a-\\{\\}\\x7F-\\xA1\\xA7\\xAA\\xAB\\xAD\\xB2\\xB3\\xB5-\\xB7\\xB9-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376-\\u0383\\u0386-\\u03F5\\u03F7-\\u0481\\u0483-\\u058C\\u0590-\\u0605\\u0609\\u060A\\u060C\\u060D\\u0610-\\u06DD\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF-\\u07F5\\u07F7-\\u09F1\\u09F4-\\u09F9\\u09FC-\\u0AF0\\u0AF2-\\u0B6F\\u0B71-\\u0BF2\\u0BFB-\\u0C7E\\u0C80-\\u0D78\\u0D7A-\\u0E3E\\u0E40-\\u0F00\\u0F04-\\u0F12\\u0F14\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39-\\u0FBD\\u0FC6\\u0FCD\\u0FD0-\\u0FD4\\u0FD9-\\u109D\\u10A0-\\u138F\\u139A-\\u17DA\\u17DC-\\u193F\\u1941-\\u19DD\\u1A00-\\u1B60\\u1B6B-\\u1B73\\u1B7D-\\u1FBC\\u1FBE\\u1FC2-\\u1FCC\\u1FD0-\\u1FDC\\u1FE0-\\u1FEC\\u1FF0-\\u1FFC\\u1FFF-\\u2043\\u2045-\\u2051\\u2053-\\u2079\\u207D-\\u2089\\u208D-\\u209F\\u20BE-\\u20FF\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u218F\\u2308-\\u230B\\u2329\\u232A\\u23FB-\\u23FF\\u2427-\\u243F\\u244B-\\u249B\\u24EA-\\u24FF\\u2768-\\u2793\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2B74\\u2B75\\u2B96\\u2B97\\u2BBA-\\u2BBC\\u2BC9\\u2BD2-\\u2CE4\\u2CEB-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u3003\\u3005-\\u3011\\u3014-\\u301F\\u3021-\\u3035\\u3038-\\u303D\\u3040-\\u309A\\u309D-\\u318F\\u3192-\\u3195\\u31A0-\\u31BF\\u31E4-\\u31FF\\u321F-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u32FF\\u3400-\\u4DBF\\u4E00-\\uA48F\\uA4C7-\\uA6FF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA827\\uA82C-\\uA835\\uA83A-\\uAA76\\uAA7A-\\uAB5A\\uAB5C-\\uD7FF\\uDC00-\\uFB28\\uFB2A-\\uFBB1\\uFBC2-\\uFDFB\\uFDFE-\\uFE61\\uFE63\\uFE67\\uFE68\\uFE6A-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF1B\\uFF1F-\\uFF3D\\uFF3F\\uFF41-\\uFF5B\\uFF5D\\uFF5F-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF]|\\uD800[\\uDC00-\\uDD36\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDD8D-\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFD-\\uDFFF]|[\\uD801\\uD803-\\uD819\\uD81B-\\uD82E\\uD830-\\uD833\\uD836-\\uD83A\\uD83F-\\uDBFF][\\uDC00-\\uDFFF]|\\uD802[\\uDC00-\\uDC76\\uDC79-\\uDEC7\\uDEC9-\\uDFFF]|\\uD81A[\\uDC00-\\uDF3B\\uDF40-\\uDF44\\uDF46-\\uDFFF]|\\uD82F[\\uDC00-\\uDC9B\\uDC9D-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD65-\\uDD69\\uDD6D-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDDDE-\\uDDFF\\uDE42-\\uDE44\\uDE46-\\uDEFF\\uDF57-\\uDFFF]|\\uD835[\\uDC00-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFFF]|\\uD83B[\\uDC00-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDD0F\\uDD2F\\uDD6C-\\uDD6F\\uDD9B-\\uDDE5\\uDE03-\\uDE0F\\uDE3B-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDEFF\\uDF2D-\\uDF2F\\uDF7E\\uDF7F\\uDFCF-\\uDFD3\\uDFF8-\\uDFFF]|\\uD83D[\\uDCFF\\uDD4B-\\uDD4F\\uDD7A\\uDDA4\\uDE43\\uDE44\\uDED0-\\uDEDF\\uDEED-\\uDEEF\\uDEF4-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDFFF]|[\\uD800-\\uDBFF]/;\n  /**\n   * symbolProperties( currency, cldr )\n   *\n   * Return pattern replacing `¤` with the appropriate currency symbol literal.\n   */\n\n  var currencySymbolProperties = function (currency, cldr, options) {\n    var currencySpacing,\n        pattern,\n        symbol,\n        symbolEntries,\n        regexp = {\n      \"[:digit:]\": /\\d/,\n      \"[:^S:]\": regexpNotS\n    };\n\n    if (options.style === \"code\") {\n      symbol = currency;\n    } else {\n      symbolEntries = [\"symbol\"]; // If options.symbolForm === \"narrow\" was passed, prepend it.\n\n      if (options.symbolForm === \"narrow\") {\n        symbolEntries.unshift(\"symbol-alt-narrow\");\n      }\n\n      symbolEntries.some(function (symbolEntry) {\n        return symbol = cldr.main([\"numbers/currencies\", currency, symbolEntry]);\n      });\n    }\n\n    currencySpacing = [\"beforeCurrency\", \"afterCurrency\"].map(function (position) {\n      return cldr.main([\"numbers\", \"currencyFormats-numberSystem-\" + numberNumberingSystem(cldr), \"currencySpacing\", position]);\n    });\n    pattern = cldr.main([\"numbers\", \"currencyFormats-numberSystem-\" + numberNumberingSystem(cldr), options.style === \"accounting\" ? \"accounting\" : \"standard\"]);\n    pattern = // The number of decimal places and the rounding for each currency is not locale-specific.\n    // Those values are overridden by Supplemental Currency Data.\n    currencySupplementalOverride(currency, pattern, cldr) // Replace \"¤\" (\\u00A4) with the appropriate symbol literal.\n    .split(\";\").map(function (pattern) {\n      return pattern.split(\"\\u00A4\").map(function (part, i) {\n        var currencyMatch = regexp[currencySpacing[i].currencyMatch],\n            surroundingMatch = regexp[currencySpacing[i].surroundingMatch],\n            insertBetween = \"\"; // For currencyMatch and surroundingMatch definitions, read [1].\n        // When i === 0, beforeCurrency is being handled. Otherwise, afterCurrency.\n        // 1: http://www.unicode.org/reports/tr35/tr35-numbers.html#Currencies\n\n        currencyMatch = currencyMatch.test(symbol.charAt(i ? symbol.length - 1 : 0));\n        surroundingMatch = surroundingMatch.test(part.charAt(i ? 0 : part.length - 1).replace(/[#@,.]/g, \"0\"));\n\n        if (currencyMatch && part && surroundingMatch) {\n          insertBetween = currencySpacing[i].insertBetween;\n        }\n\n        return (i ? insertBetween : \"\") + part + (i ? \"\" : insertBetween);\n      }).join(\"\\u00A4\");\n    }).join(\";\");\n    return {\n      pattern: pattern,\n      symbol: symbol\n    };\n  };\n  /**\n   * nameFormat( formattedNumber, pluralForm, properties )\n   *\n   * Return the appropriate name form currency format.\n   */\n\n\n  var currencyNameFormat = function (formattedNumber, pluralForm, properties) {\n    var displayName,\n        unitPattern,\n        parts = [],\n        displayNames = properties.displayNames || {},\n        unitPatterns = properties.unitPatterns;\n    displayName = displayNames[\"displayName-count-\" + pluralForm] || displayNames[\"displayName-count-other\"] || displayNames.displayName || properties.currency;\n    unitPattern = unitPatterns[\"unitPattern-count-\" + pluralForm] || unitPatterns[\"unitPattern-count-other\"];\n    formatMessageToParts(unitPattern, [formattedNumber, displayName]).forEach(function (part) {\n      if (part.type === \"variable\" && part.name === \"0\") {\n        part.value.forEach(function (part) {\n          partsPush(parts, part.type, part.value);\n        });\n      } else if (part.type === \"variable\" && part.name === \"1\") {\n        partsPush(parts, \"currency\", part.value);\n      } else {\n        partsPush(parts, \"literal\", part.value);\n      }\n    });\n    return parts;\n  };\n  /**\n   * symbolFormat( parts, symbol )\n   *\n   * Return the appropriate symbol/account form format.\n   */\n\n\n  var currencySymbolFormat = function (parts, symbol) {\n    parts.forEach(function (part) {\n      if (part.type === \"currency\") {\n        part.value = symbol;\n      }\n    });\n    return parts;\n  };\n\n  var currencyToPartsFormatterFn = function (numberToPartsFormatter, pluralGenerator, properties) {\n    var fn; // Return formatter when style is \"name\".\n\n    if (pluralGenerator && properties) {\n      fn = function currencyToPartsFormatter(value) {\n        validateParameterPresence(value, \"value\");\n        validateParameterTypeNumber(value, \"value\");\n        return currencyNameFormat(numberToPartsFormatter(value), pluralGenerator(value), properties);\n      }; // Return formatter when style is \"symbol\", \"accounting\", or \"code\".\n\n    } else {\n      fn = function currencyToPartsFormatter(value) {\n        // 1: Reusing pluralGenerator argument, but in this case it is actually `symbol`\n        return currencySymbolFormat(numberToPartsFormatter(value), pluralGenerator\n        /* 1 */\n        );\n      };\n    }\n\n    return fn;\n  };\n  /**\n   * objectOmit( object, keys )\n   *\n   * Return a copy of the object, filtered to omit the blacklisted key or array of keys.\n   */\n\n\n  var objectOmit = function (object, keys) {\n    var key,\n        copy = {};\n    keys = alwaysArray(keys);\n\n    for (key in object) {\n      if (keys.indexOf(key) === -1) {\n        copy[key] = object[key];\n      }\n    }\n\n    return copy;\n  };\n\n  function validateRequiredCldr(path, value) {\n    validateCldr(path, value, {\n      skip: [/numbers\\/currencies\\/[^/]+\\/symbol-alt-/, /supplemental\\/currencyData\\/fractions\\/[A-Za-z]{3}$/]\n    });\n  }\n  /**\n   * .currencyFormatter( currency [, options] )\n   *\n   * @currency [String] 3-letter currency code as defined by ISO 4217.\n   *\n   * @options [Object]:\n   * - style: [String] \"symbol\" (default), \"accounting\", \"code\" or \"name\".\n   * - see also number/format options.\n   *\n   * Return a function that formats a currency according to the given options and default/instance\n   * locale.\n   */\n\n\n  Globalize.currencyFormatter = Globalize.prototype.currencyFormatter = function (currency, options) {\n    var args, currencyToPartsFormatter, returnFn;\n    validateParameterPresence(currency, \"currency\");\n    validateParameterTypeCurrency(currency, \"currency\");\n    validateParameterTypePlainObject(options, \"options\");\n    options = options || {};\n    args = [currency, options];\n    currencyToPartsFormatter = this.currencyToPartsFormatter(currency, options);\n    returnFn = currencyFormatterFn(currencyToPartsFormatter);\n    runtimeBind(args, this.cldr, returnFn, [currencyToPartsFormatter]);\n    return returnFn;\n  };\n  /**\n   * .currencyToPartsFormatter( currency [, options] )\n   *\n   * @currency [String] 3-letter currency code as defined by ISO 4217.\n   *\n   * @options [Object]:\n   * - style: [String] \"symbol\" (default), \"accounting\", \"code\" or \"name\".\n   * - see also number/format options.\n   *\n   * Return a currency formatter function (of the form below) according to the given options and the\n   * default/instance locale.\n   *\n   * fn( value )\n   *\n   * @value [Number]\n   *\n   * Return a function that formats a currency to parts according to the given options\n   * and the default/instance locale.\n   */\n\n\n  Globalize.currencyToPartsFormatter = Globalize.prototype.currencyToPartsFormatter = function (currency, options) {\n    var args, cldr, numberToPartsFormatter, pluralGenerator, properties, returnFn, style;\n    validateParameterPresence(currency, \"currency\");\n    validateParameterTypeCurrency(currency, \"currency\");\n    validateParameterTypePlainObject(options, \"options\");\n    cldr = this.cldr;\n    options = options || {};\n    args = [currency, options];\n    style = options.style || \"symbol\";\n    validateDefaultLocale(cldr); // Get properties given style (\"symbol\" default, \"code\" or \"name\").\n\n    cldr.on(\"get\", validateRequiredCldr);\n\n    try {\n      properties = {\n        accounting: currencySymbolProperties,\n        code: currencySymbolProperties,\n        name: currencyNameProperties,\n        symbol: currencySymbolProperties\n      }[style](currency, cldr, options);\n    } finally {\n      cldr.off(\"get\", validateRequiredCldr);\n    } // options = options minus style, plus raw pattern.\n\n\n    options = objectOmit(options, \"style\");\n    options.raw = properties.pattern; // Return formatter when style is \"symbol\", \"accounting\", or \"code\".\n\n    if (style === \"symbol\" || style === \"accounting\" || style === \"code\") {\n      numberToPartsFormatter = this.numberToPartsFormatter(options);\n      returnFn = currencyToPartsFormatterFn(numberToPartsFormatter, properties.symbol);\n      runtimeBind(args, cldr, returnFn, [numberToPartsFormatter, properties.symbol]); // Return formatter when style is \"name\".\n    } else {\n      numberToPartsFormatter = this.numberToPartsFormatter(options); // Is plural module present? Yes, use its generator. Nope, use an error generator.\n\n      pluralGenerator = this.plural !== undefined ? this.pluralGenerator() : createErrorPluralModulePresence;\n      returnFn = currencyToPartsFormatterFn(numberToPartsFormatter, pluralGenerator, properties);\n      runtimeBind(args, cldr, returnFn, [numberToPartsFormatter, pluralGenerator, properties]);\n    }\n\n    return returnFn;\n  };\n  /**\n   * .currencyParser( currency [, options] )\n   *\n   * @currency [String] 3-letter currency code as defined by ISO 4217.\n   *\n   * @options [Object] see currencyFormatter.\n   *\n   * Return the currency parser according to the given options and the default/instance locale.\n   */\n\n\n  Globalize.currencyParser = Globalize.prototype.currencyParser = function ()\n  /* currency, options */\n  {// TODO implement parser.\n  };\n  /**\n   * .formatCurrency( value, currency [, options] )\n   *\n   * @value [Number] number to be formatted.\n   *\n   * @currency [String] 3-letter currency code as defined by ISO 4217.\n   *\n   * @options [Object] see currencyFormatter.\n   *\n   * Format a currency according to the given options and the default/instance locale.\n   */\n\n\n  Globalize.formatCurrency = Globalize.prototype.formatCurrency = function (value, currency, options) {\n    validateParameterPresence(value, \"value\");\n    validateParameterTypeNumber(value, \"value\");\n    return this.currencyFormatter(currency, options)(value);\n  };\n  /**\n   * .formatCurrencyToParts( value, currency [, options] )\n   *\n   * @value [Number] number to be formatted.\n   *\n   * @currency [String] 3-letter currency code as defined by ISO 4217.\n   *\n   * @options [Object] see currencyFormatter.\n   *\n   * Format a currency to parts according to the given options and the default/instance locale.\n   */\n\n\n  Globalize.formatCurrencyToParts = Globalize.prototype.formatCurrencyToParts = function (value, currency, options) {\n    validateParameterPresence(value, \"value\");\n    validateParameterTypeNumber(value, \"value\");\n    return this.currencyToPartsFormatter(currency, options)(value);\n  };\n  /**\n   * .parseCurrency( value, currency [, options] )\n   *\n   * @value [String]\n   *\n   * @currency [String] 3-letter currency code as defined by ISO 4217.\n   *\n   * @options [Object]: See currencyFormatter.\n   *\n   * Return the parsed currency or NaN when value is invalid.\n   */\n\n\n  Globalize.parseCurrency = Globalize.prototype.parseCurrency = function ()\n  /* value, currency, options */\n  {};\n\n  return Globalize;\n});","map":{"version":3,"sources":["/Users/coryhale/Documents/rocky-mountain-lifts/rocky_mountain_lifts_crm/rml_crm/node_modules/globalize/dist/globalize/currency.js"],"names":["root","factory","define","amd","exports","module","require","Cldr","Globalize","alwaysArray","_alwaysArray","createError","_createError","formatMessageToParts","_formatMessageToParts","numberNumberingSystem","_numberNumberingSystem","numberPattern","_numberPattern","partsJoin","_partsJoin","partsPush","_partsPush","runtimeBind","_runtimeBind","stringPad","_stringPad","validateCldr","_validateCldr","validateDefaultLocale","_validateDefaultLocale","validateParameterPresence","_validateParameterPresence","validateParameterType","_validateParameterType","validateParameterTypeNumber","_validateParameterTypeNumber","validateParameterTypePlainObject","_validateParameterTypePlainObject","createErrorPluralModulePresence","validateParameterTypeCurrency","value","name","undefined","test","currencyFormatterFn","currencyToPartsFormatter","currencyFormatter","currencySupplementalOverride","currency","pattern","cldr","digits","fraction","fractionData","supplemental","_digits","slice","_rounding","replace","objectFilter","object","testRe","key","copy","currencyUnitPatterns","main","currencyNameProperties","displayNames","unitPatterns","regexpNotS","currencySymbolProperties","options","currencySpacing","symbol","symbolEntries","regexp","style","symbolForm","unshift","some","symbolEntry","map","position","split","part","i","currencyMatch","surroundingMatch","insertBetween","charAt","length","join","currencyNameFormat","formattedNumber","pluralForm","properties","displayName","unitPattern","parts","forEach","type","currencySymbolFormat","currencyToPartsFormatterFn","numberToPartsFormatter","pluralGenerator","fn","objectOmit","keys","indexOf","validateRequiredCldr","path","skip","prototype","args","returnFn","on","accounting","code","off","raw","plural","currencyParser","formatCurrency","formatCurrencyToParts","parseCurrency"],"mappings":"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","sourcesContent":["/*!\n * Globalize v1.5.0\n *\n * http://github.com/jquery/globalize\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2020-03-25T12:19Z\n */\n(function( root, factory ) {\n\n\t// UMD returnExports\n\tif ( typeof define === \"function\" && define.amd ) {\n\n\t\t// AMD\n\t\tdefine([\n\t\t\t\"cldr\",\n\t\t\t\"../globalize\",\n\t\t\t\"./number\",\n\t\t\t\"cldr/event\",\n\t\t\t\"cldr/supplemental\"\n\t\t], factory );\n\t} else if ( typeof exports === \"object\" ) {\n\n\t\t// Node, CommonJS\n\t\tmodule.exports = factory( require( \"cldrjs\" ), require( \"../globalize\" ) );\n\t} else {\n\n\t\t// Global\n\t\tfactory( root.Cldr, root.Globalize );\n\t}\n}(this, function( Cldr, Globalize ) {\n\nvar alwaysArray = Globalize._alwaysArray,\n\tcreateError = Globalize._createError,\n\tformatMessageToParts = Globalize._formatMessageToParts,\n\tnumberNumberingSystem = Globalize._numberNumberingSystem,\n\tnumberPattern = Globalize._numberPattern,\n\tpartsJoin = Globalize._partsJoin,\n\tpartsPush = Globalize._partsPush,\n\truntimeBind = Globalize._runtimeBind,\n\tstringPad = Globalize._stringPad,\n\tvalidateCldr = Globalize._validateCldr,\n\tvalidateDefaultLocale = Globalize._validateDefaultLocale,\n\tvalidateParameterPresence = Globalize._validateParameterPresence,\n\tvalidateParameterType = Globalize._validateParameterType,\n\tvalidateParameterTypeNumber = Globalize._validateParameterTypeNumber,\n\tvalidateParameterTypePlainObject = Globalize._validateParameterTypePlainObject;\n\n\nvar createErrorPluralModulePresence = function() {\n\treturn createError( \"E_MISSING_PLURAL_MODULE\", \"Plural module not loaded.\" );\n};\n\n\n\n\nvar validateParameterTypeCurrency = function( value, name ) {\n\tvalidateParameterType(\n\t\tvalue,\n\t\tname,\n\t\tvalue === undefined || typeof value === \"string\" && ( /^[A-Za-z]{3}$/ ).test( value ),\n\t\t\"3-letter currency code string as defined by ISO 4217\"\n\t);\n};\n\n\n\n\nvar currencyFormatterFn = function( currencyToPartsFormatter ) {\n\treturn function currencyFormatter( value ) {\n\t\treturn partsJoin( currencyToPartsFormatter( value ));\n\t};\n};\n\n\n\n\n/**\n * supplementalOverride( currency, pattern, cldr )\n *\n * Return pattern with fraction digits overriden by supplemental currency data.\n */\nvar currencySupplementalOverride = function( currency, pattern, cldr ) {\n\tvar digits,\n\t\tfraction = \"\",\n\t\tfractionData = cldr.supplemental([ \"currencyData/fractions\", currency ]) ||\n\t\t\tcldr.supplemental( \"currencyData/fractions/DEFAULT\" );\n\n\tdigits = +fractionData._digits;\n\n\tif ( digits ) {\n\t\tfraction = \".\" + stringPad( \"0\", digits ).slice( 0, -1 ) + fractionData._rounding;\n\t}\n\n\treturn pattern.replace( /\\.(#+|0*[0-9]|0+[0-9]?)/g, fraction );\n};\n\n\n\n\nvar objectFilter = function( object, testRe ) {\n\tvar key,\n\t\tcopy = {};\n\n\tfor ( key in object ) {\n\t\tif ( testRe.test( key ) ) {\n\t\t\tcopy[ key ] = object[ key ];\n\t\t}\n\t}\n\n\treturn copy;\n};\n\n\n\n\nvar currencyUnitPatterns = function( cldr ) {\n\treturn objectFilter( cldr.main([\n\t\t\"numbers\",\n\t\t\"currencyFormats-numberSystem-\" + numberNumberingSystem( cldr )\n\t]), /^unitPattern/ );\n};\n\n\n\n\n/**\n * nameProperties( currency, cldr )\n *\n * Return number pattern with the appropriate currency code in as literal.\n */\nvar currencyNameProperties = function( currency, cldr ) {\n\tvar pattern = numberPattern( \"decimal\", cldr );\n\n\t// The number of decimal places and the rounding for each currency is not locale-specific. Those\n\t// values overridden by Supplemental Currency Data.\n\tpattern = currencySupplementalOverride( currency, pattern, cldr );\n\n\treturn {\n\t\tdisplayNames: objectFilter( cldr.main([\n\t\t\t\"numbers/currencies\",\n\t\t\tcurrency\n\t\t]), /^displayName/ ),\n\t\tpattern: pattern,\n\t\tunitPatterns: currencyUnitPatterns( cldr )\n\t};\n};\n\n\n\n\n/**\n * Unicode regular expression for: everything except math symbols, currency signs, dingbats, and\n * box-drawing characters.\n *\n * Generated by:\n *\n * regenerate()\n *   .addRange( 0x0, 0x10FFFF )\n *   .remove( require( \"unicode-7.0.0/categories/S/symbols\" ) ).toString();\n *\n * https://github.com/mathiasbynens/regenerate\n * https://github.com/mathiasbynens/unicode-7.0.0\n */\nvar regexpNotS = /[\\0-#%-\\*,-;\\?-\\]_a-\\{\\}\\x7F-\\xA1\\xA7\\xAA\\xAB\\xAD\\xB2\\xB3\\xB5-\\xB7\\xB9-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376-\\u0383\\u0386-\\u03F5\\u03F7-\\u0481\\u0483-\\u058C\\u0590-\\u0605\\u0609\\u060A\\u060C\\u060D\\u0610-\\u06DD\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF-\\u07F5\\u07F7-\\u09F1\\u09F4-\\u09F9\\u09FC-\\u0AF0\\u0AF2-\\u0B6F\\u0B71-\\u0BF2\\u0BFB-\\u0C7E\\u0C80-\\u0D78\\u0D7A-\\u0E3E\\u0E40-\\u0F00\\u0F04-\\u0F12\\u0F14\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39-\\u0FBD\\u0FC6\\u0FCD\\u0FD0-\\u0FD4\\u0FD9-\\u109D\\u10A0-\\u138F\\u139A-\\u17DA\\u17DC-\\u193F\\u1941-\\u19DD\\u1A00-\\u1B60\\u1B6B-\\u1B73\\u1B7D-\\u1FBC\\u1FBE\\u1FC2-\\u1FCC\\u1FD0-\\u1FDC\\u1FE0-\\u1FEC\\u1FF0-\\u1FFC\\u1FFF-\\u2043\\u2045-\\u2051\\u2053-\\u2079\\u207D-\\u2089\\u208D-\\u209F\\u20BE-\\u20FF\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u218F\\u2308-\\u230B\\u2329\\u232A\\u23FB-\\u23FF\\u2427-\\u243F\\u244B-\\u249B\\u24EA-\\u24FF\\u2768-\\u2793\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2B74\\u2B75\\u2B96\\u2B97\\u2BBA-\\u2BBC\\u2BC9\\u2BD2-\\u2CE4\\u2CEB-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u3003\\u3005-\\u3011\\u3014-\\u301F\\u3021-\\u3035\\u3038-\\u303D\\u3040-\\u309A\\u309D-\\u318F\\u3192-\\u3195\\u31A0-\\u31BF\\u31E4-\\u31FF\\u321F-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u32FF\\u3400-\\u4DBF\\u4E00-\\uA48F\\uA4C7-\\uA6FF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA827\\uA82C-\\uA835\\uA83A-\\uAA76\\uAA7A-\\uAB5A\\uAB5C-\\uD7FF\\uDC00-\\uFB28\\uFB2A-\\uFBB1\\uFBC2-\\uFDFB\\uFDFE-\\uFE61\\uFE63\\uFE67\\uFE68\\uFE6A-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF1B\\uFF1F-\\uFF3D\\uFF3F\\uFF41-\\uFF5B\\uFF5D\\uFF5F-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF]|\\uD800[\\uDC00-\\uDD36\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDD8D-\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFD-\\uDFFF]|[\\uD801\\uD803-\\uD819\\uD81B-\\uD82E\\uD830-\\uD833\\uD836-\\uD83A\\uD83F-\\uDBFF][\\uDC00-\\uDFFF]|\\uD802[\\uDC00-\\uDC76\\uDC79-\\uDEC7\\uDEC9-\\uDFFF]|\\uD81A[\\uDC00-\\uDF3B\\uDF40-\\uDF44\\uDF46-\\uDFFF]|\\uD82F[\\uDC00-\\uDC9B\\uDC9D-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD65-\\uDD69\\uDD6D-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDDDE-\\uDDFF\\uDE42-\\uDE44\\uDE46-\\uDEFF\\uDF57-\\uDFFF]|\\uD835[\\uDC00-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFFF]|\\uD83B[\\uDC00-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDD0F\\uDD2F\\uDD6C-\\uDD6F\\uDD9B-\\uDDE5\\uDE03-\\uDE0F\\uDE3B-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDEFF\\uDF2D-\\uDF2F\\uDF7E\\uDF7F\\uDFCF-\\uDFD3\\uDFF8-\\uDFFF]|\\uD83D[\\uDCFF\\uDD4B-\\uDD4F\\uDD7A\\uDDA4\\uDE43\\uDE44\\uDED0-\\uDEDF\\uDEED-\\uDEEF\\uDEF4-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDFFF]|[\\uD800-\\uDBFF]/;\n\n\n\n\n/**\n * symbolProperties( currency, cldr )\n *\n * Return pattern replacing `¤` with the appropriate currency symbol literal.\n */\nvar currencySymbolProperties = function( currency, cldr, options ) {\n\tvar currencySpacing, pattern, symbol, symbolEntries,\n\t\tregexp = {\n\t\t\t\"[:digit:]\": /\\d/,\n\t\t\t\"[:^S:]\": regexpNotS\n\t\t};\n\n\tif ( options.style === \"code\" ) {\n\t\tsymbol = currency;\n\t} else {\n\t\tsymbolEntries = [ \"symbol\" ];\n\n\t\t// If options.symbolForm === \"narrow\" was passed, prepend it.\n\t\tif ( options.symbolForm === \"narrow\" ) {\n\t\t\tsymbolEntries.unshift( \"symbol-alt-narrow\" );\n\t\t}\n\n\t\tsymbolEntries.some(function( symbolEntry ) {\n\t\t\treturn symbol = cldr.main([\n\t\t\t\t\"numbers/currencies\",\n\t\t\t\tcurrency,\n\t\t\t\tsymbolEntry\n\t\t\t]);\n\t\t});\n\t}\n\n\tcurrencySpacing = [ \"beforeCurrency\", \"afterCurrency\" ].map(function( position ) {\n\t\treturn cldr.main([\n\t\t\t\"numbers\",\n\t\t\t\"currencyFormats-numberSystem-\" + numberNumberingSystem( cldr ),\n\t\t\t\"currencySpacing\",\n\t\t\tposition\n\t\t]);\n\t});\n\n\tpattern = cldr.main([\n\t\t\"numbers\",\n\t\t\"currencyFormats-numberSystem-\" + numberNumberingSystem( cldr ),\n\t\toptions.style === \"accounting\" ? \"accounting\" : \"standard\"\n\t]);\n\n\tpattern =\n\n\t\t// The number of decimal places and the rounding for each currency is not locale-specific.\n\t\t// Those values are overridden by Supplemental Currency Data.\n\t\tcurrencySupplementalOverride( currency, pattern, cldr )\n\n\t\t// Replace \"¤\" (\\u00A4) with the appropriate symbol literal.\n\t\t.split( \";\" ).map(function( pattern ) {\n\n\t\t\treturn pattern.split( \"\\u00A4\" ).map(function( part, i ) {\n\t\t\t\tvar currencyMatch = regexp[ currencySpacing[ i ].currencyMatch ],\n\t\t\t\t\tsurroundingMatch = regexp[ currencySpacing[ i ].surroundingMatch ],\n\t\t\t\t\tinsertBetween = \"\";\n\n\t\t\t\t// For currencyMatch and surroundingMatch definitions, read [1].\n\t\t\t\t// When i === 0, beforeCurrency is being handled. Otherwise, afterCurrency.\n\t\t\t\t// 1: http://www.unicode.org/reports/tr35/tr35-numbers.html#Currencies\n\t\t\t\tcurrencyMatch = currencyMatch.test( symbol.charAt( i ? symbol.length - 1 : 0 ) );\n\t\t\t\tsurroundingMatch = surroundingMatch.test(\n\t\t\t\t\tpart.charAt( i ? 0 : part.length - 1 ).replace( /[#@,.]/g, \"0\" )\n\t\t\t\t);\n\n\t\t\t\tif ( currencyMatch && part && surroundingMatch ) {\n\t\t\t\t\tinsertBetween = currencySpacing[ i ].insertBetween;\n\t\t\t\t}\n\n\t\t\t\treturn ( i ? insertBetween : \"\" ) + part + ( i ? \"\" : insertBetween );\n\t\t\t}).join( \"\\u00A4\" );\n\t\t}).join( \";\" );\n\n\treturn {\n\t\tpattern: pattern,\n\t\tsymbol: symbol\n\t};\n};\n\n\n\n\n/**\n * nameFormat( formattedNumber, pluralForm, properties )\n *\n * Return the appropriate name form currency format.\n */\nvar currencyNameFormat = function( formattedNumber, pluralForm, properties ) {\n\tvar displayName, unitPattern,\n\t\tparts = [],\n\t\tdisplayNames = properties.displayNames || {},\n\t\tunitPatterns = properties.unitPatterns;\n\n\tdisplayName = displayNames[ \"displayName-count-\" + pluralForm ] ||\n\t\tdisplayNames[ \"displayName-count-other\" ] ||\n\t\tdisplayNames.displayName ||\n\t\tproperties.currency;\n\tunitPattern = unitPatterns[ \"unitPattern-count-\" + pluralForm ] ||\n\t\tunitPatterns[ \"unitPattern-count-other\" ];\n\n\tformatMessageToParts( unitPattern, [ formattedNumber, displayName ]).forEach(function( part ) {\n\t\tif ( part.type === \"variable\" && part.name === \"0\" ) {\n\t\t\tpart.value.forEach(function( part ) {\n\t\t\t\tpartsPush( parts, part.type, part.value );\n\t\t\t});\n\t\t} else if ( part.type === \"variable\" && part.name === \"1\" ) {\n\t\t\tpartsPush( parts, \"currency\", part.value );\n\t\t} else {\n\t\t\tpartsPush( parts, \"literal\", part.value );\n\t\t}\n\t});\n\n\treturn parts;\n};\n\n\n\n\n/**\n * symbolFormat( parts, symbol )\n *\n * Return the appropriate symbol/account form format.\n */\nvar currencySymbolFormat = function( parts, symbol ) {\n\tparts.forEach(function( part ) {\n\t\tif ( part.type === \"currency\" ) {\n\t\t\tpart.value = symbol;\n\t\t}\n\t});\n\treturn parts;\n};\n\n\n\n\nvar currencyToPartsFormatterFn = function( numberToPartsFormatter, pluralGenerator, properties ) {\n\tvar fn;\n\n\t// Return formatter when style is \"name\".\n\tif ( pluralGenerator && properties ) {\n\t\tfn = function currencyToPartsFormatter( value ) {\n\t\t\tvalidateParameterPresence( value, \"value\" );\n\t\t\tvalidateParameterTypeNumber( value, \"value\" );\n\t\t\treturn currencyNameFormat(\n\t\t\t\tnumberToPartsFormatter( value ),\n\t\t\t\tpluralGenerator( value ),\n\t\t\t\tproperties\n\t\t\t);\n\t\t};\n\n\t// Return formatter when style is \"symbol\", \"accounting\", or \"code\".\n\t} else {\n\t\tfn = function currencyToPartsFormatter( value ) {\n\n\t\t\t// 1: Reusing pluralGenerator argument, but in this case it is actually `symbol`\n\t\t\treturn currencySymbolFormat( numberToPartsFormatter( value ), pluralGenerator /* 1 */ );\n\t\t};\n\t}\n\n\treturn fn;\n};\n\n\n\n\n/**\n * objectOmit( object, keys )\n *\n * Return a copy of the object, filtered to omit the blacklisted key or array of keys.\n */\nvar objectOmit = function( object, keys ) {\n\tvar key,\n\t\tcopy = {};\n\n\tkeys = alwaysArray( keys );\n\n\tfor ( key in object ) {\n\t\tif ( keys.indexOf( key ) === -1 ) {\n\t\t\tcopy[ key ] = object[ key ];\n\t\t}\n\t}\n\n\treturn copy;\n};\n\n\n\n\nfunction validateRequiredCldr( path, value ) {\n\tvalidateCldr( path, value, {\n\t\tskip: [\n\t\t\t/numbers\\/currencies\\/[^/]+\\/symbol-alt-/,\n\t\t\t/supplemental\\/currencyData\\/fractions\\/[A-Za-z]{3}$/\n\t\t]\n\t});\n}\n\n/**\n * .currencyFormatter( currency [, options] )\n *\n * @currency [String] 3-letter currency code as defined by ISO 4217.\n *\n * @options [Object]:\n * - style: [String] \"symbol\" (default), \"accounting\", \"code\" or \"name\".\n * - see also number/format options.\n *\n * Return a function that formats a currency according to the given options and default/instance\n * locale.\n */\nGlobalize.currencyFormatter =\nGlobalize.prototype.currencyFormatter = function( currency, options ) {\n\tvar args, currencyToPartsFormatter, returnFn;\n\n\tvalidateParameterPresence( currency, \"currency\" );\n\tvalidateParameterTypeCurrency( currency, \"currency\" );\n\n\tvalidateParameterTypePlainObject( options, \"options\" );\n\n\toptions = options || {};\n\targs = [ currency, options ];\n\n\tcurrencyToPartsFormatter = this.currencyToPartsFormatter( currency, options );\n\treturnFn = currencyFormatterFn( currencyToPartsFormatter );\n\truntimeBind( args, this.cldr, returnFn, [ currencyToPartsFormatter ] );\n\n\treturn returnFn;\n};\n\n/**\n * .currencyToPartsFormatter( currency [, options] )\n *\n * @currency [String] 3-letter currency code as defined by ISO 4217.\n *\n * @options [Object]:\n * - style: [String] \"symbol\" (default), \"accounting\", \"code\" or \"name\".\n * - see also number/format options.\n *\n * Return a currency formatter function (of the form below) according to the given options and the\n * default/instance locale.\n *\n * fn( value )\n *\n * @value [Number]\n *\n * Return a function that formats a currency to parts according to the given options\n * and the default/instance locale.\n */\nGlobalize.currencyToPartsFormatter =\nGlobalize.prototype.currencyToPartsFormatter = function( currency, options ) {\n\tvar args, cldr, numberToPartsFormatter, pluralGenerator, properties, returnFn, style;\n\n\tvalidateParameterPresence( currency, \"currency\" );\n\tvalidateParameterTypeCurrency( currency, \"currency\" );\n\n\tvalidateParameterTypePlainObject( options, \"options\" );\n\n\tcldr = this.cldr;\n\toptions = options || {};\n\n\targs = [ currency, options ];\n\tstyle = options.style || \"symbol\";\n\n\tvalidateDefaultLocale( cldr );\n\n\t// Get properties given style (\"symbol\" default, \"code\" or \"name\").\n\tcldr.on( \"get\", validateRequiredCldr );\n\ttry {\n\t\tproperties = ({\n\t\t\taccounting: currencySymbolProperties,\n\t\t\tcode: currencySymbolProperties,\n\t\t\tname: currencyNameProperties,\n\t\t\tsymbol: currencySymbolProperties\n\t\t}[ style ] )( currency, cldr, options );\n\t} finally {\n\t\tcldr.off( \"get\", validateRequiredCldr );\n\t}\n\n\t// options = options minus style, plus raw pattern.\n\toptions = objectOmit( options, \"style\" );\n\toptions.raw = properties.pattern;\n\n\t// Return formatter when style is \"symbol\", \"accounting\", or \"code\".\n\tif ( style === \"symbol\" || style === \"accounting\" || style === \"code\" ) {\n\t\tnumberToPartsFormatter = this.numberToPartsFormatter( options );\n\n\t\treturnFn = currencyToPartsFormatterFn( numberToPartsFormatter, properties.symbol );\n\n\t\truntimeBind( args, cldr, returnFn, [ numberToPartsFormatter, properties.symbol ] );\n\n\t// Return formatter when style is \"name\".\n\t} else {\n\t\tnumberToPartsFormatter = this.numberToPartsFormatter( options );\n\n\t\t// Is plural module present? Yes, use its generator. Nope, use an error generator.\n\t\tpluralGenerator = this.plural !== undefined ?\n\t\t\tthis.pluralGenerator() :\n\t\t\tcreateErrorPluralModulePresence;\n\n\t\treturnFn = currencyToPartsFormatterFn(\n\t\t\tnumberToPartsFormatter,\n\t\t\tpluralGenerator,\n\t\t\tproperties\n\t\t);\n\n\t\truntimeBind( args, cldr, returnFn, [\n\t\t\tnumberToPartsFormatter,\n\t\t\tpluralGenerator,\n\t\t\tproperties\n\t\t]);\n\t}\n\n\treturn returnFn;\n};\n\n/**\n * .currencyParser( currency [, options] )\n *\n * @currency [String] 3-letter currency code as defined by ISO 4217.\n *\n * @options [Object] see currencyFormatter.\n *\n * Return the currency parser according to the given options and the default/instance locale.\n */\nGlobalize.currencyParser =\nGlobalize.prototype.currencyParser = function( /* currency, options */ ) {\n\n\t// TODO implement parser.\n\n};\n\n/**\n * .formatCurrency( value, currency [, options] )\n *\n * @value [Number] number to be formatted.\n *\n * @currency [String] 3-letter currency code as defined by ISO 4217.\n *\n * @options [Object] see currencyFormatter.\n *\n * Format a currency according to the given options and the default/instance locale.\n */\nGlobalize.formatCurrency =\nGlobalize.prototype.formatCurrency = function( value, currency, options ) {\n\tvalidateParameterPresence( value, \"value\" );\n\tvalidateParameterTypeNumber( value, \"value\" );\n\treturn this.currencyFormatter( currency, options )( value );\n};\n\n/**\n * .formatCurrencyToParts( value, currency [, options] )\n *\n * @value [Number] number to be formatted.\n *\n * @currency [String] 3-letter currency code as defined by ISO 4217.\n *\n * @options [Object] see currencyFormatter.\n *\n * Format a currency to parts according to the given options and the default/instance locale.\n */\nGlobalize.formatCurrencyToParts =\nGlobalize.prototype.formatCurrencyToParts = function( value, currency, options ) {\n\tvalidateParameterPresence( value, \"value\" );\n\tvalidateParameterTypeNumber( value, \"value\" );\n\treturn this.currencyToPartsFormatter( currency, options )( value );\n};\n\n/**\n * .parseCurrency( value, currency [, options] )\n *\n * @value [String]\n *\n * @currency [String] 3-letter currency code as defined by ISO 4217.\n *\n * @options [Object]: See currencyFormatter.\n *\n * Return the parsed currency or NaN when value is invalid.\n */\nGlobalize.parseCurrency =\nGlobalize.prototype.parseCurrency = function( /* value, currency, options */ ) {\n};\n\nreturn Globalize;\n\n\n\n\n}));\n"]},"metadata":{},"sourceType":"script"}